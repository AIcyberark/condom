{"version":3,"sources":["/webpack/bootstrap","../node_modules/dockerfile-ast/lib/instructions/onbuild.js","../node_modules/dockerfile-ast/lib/jsonArgument.js","../node_modules/dockerfile-ast/lib/modifiableInstruction.js","../external \"os\"","../node_modules/vscode-languageserver-types/lib/umd/main.js","../lib/main.js","../external \"child_process\"","../node_modules/dockerfile-ast/lib/dockerfile.js","../node_modules/@actions/core/lib/core.js","../node_modules/dockerfile-ast/lib/util.js","../node_modules/dockerfile-ast/lib/flagOption.js","../node_modules/mustache/mustache.js","../node_modules/dockerfile-ast/lib/propertyInstruction.js","../node_modules/dockerfile-ast/lib/parserDirective.js","../node_modules/dockerfile-ast/lib/flag.js","../node_modules/@actions/core/lib/command.js","../node_modules/dockerfile-ast/lib/instructions/label.js","../lib/obfuscator.js","../node_modules/dockerfile-ast/lib/instructions/shell.js","../node_modules/dockerfile-ast/lib/instructions/cmd.js","../node_modules/dockerfile-ast/lib/argument.js","../node_modules/dockerfile-ast/lib/instructions/copy.js","../node_modules/dockerfile-ast/lib/instructions/add.js","../node_modules/dockerfile-ast/lib/instructions/healthcheck.js","../node_modules/dockerfile-ast/lib/jsonInstruction.js","../node_modules/dockerfile-ast/lib/instructions/entrypoint.js","../external \"path\"","../node_modules/dockerfile-ast/lib/instructions/env.js","../node_modules/dockerfile-ast/lib/instructions/workdir.js","../node_modules/dockerfile-ast/lib/comment.js","../external \"fs\"","../node_modules/dockerfile-ast/lib/instructions/run.js","../node_modules/dockerfile-ast/lib/imageTemplate.js","../node_modules/dockerfile-ast/lib/instructions/arg.js","../node_modules/dockerfile-ast/lib/instructions/volume.js","../node_modules/dockerfile-ast/lib/variable.js","../node_modules/dockerfile-ast/lib/instructions/user.js","../node_modules/dockerfile-ast/lib/parser.js","../node_modules/dockerfile-ast/lib/instructions/stopsignal.js","../node_modules/dockerfile-ast/lib/line.js","../node_modules/dockerfile-ast/lib/instruction.js","../node_modules/dockerfile-ast/lib/property.js","../node_modules/dockerfile-ast/lib/instructions/from.js","../node_modules/dockerfile-ast/lib/main.js"],"names":[],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC3Ca;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,iBAAiB,mBAAO,CAAC,GAAW;AACpC,sBAAsB,mBAAO,CAAC,GAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACjCM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,mBAAmB,mBAAO,CAAC,GAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACjBM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,eAAe,mBAAO,CAAC,GAAQ;AAC/B,sBAAsB,mBAAO,CAAC,GAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;ACnFP,+B;;;;;;;ACAA;;wBAEwB,OAAO;;;;;;ahB;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,eAAe,mBAAO,CAAC,GAAe;AACtC,wBAAwB,mBAAO,CAAC,GAAe;AAC/C,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,WAAW,4BAA4B;AACvC,aAAa,mBAAO,CAAC,GAAI;AACzB;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,iDAAiD,OAAO,IAAI;AAC5D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;ACzCA,0C;;;;;;;;ACAA;AACA;AACA;AACA;AACa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,YAAY,mBAAO,CAAC,GAAQ;AAC5B,wBAAwB,mBAAO,CAAC,GAAiB;AACjD,eAAe,mBAAO,CAAC,GAAqB;AAC5C,eAAe,mBAAO,CAAC,GAAQ;AAC/B,eAAe,muBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACtLM;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,kBAAkB,mBAAO,CAAC,GAAW;AACrC,wBAAwB,mBAAO,CAAC,EAAI;AACpC,0BAA0B,mBAAO,CAAC,GAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,aAAa,OAAO,cAAc,OAAO,cAAc;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,6BAA6B,UAAU,EAAE,eAAe,EAAE,oBAAoB;AAC9E;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sCAAsC;AAC3E;AACA,4DAA4D,KAAK;AACjE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA,OAAO;AACP,gC;;;;;;;;AC7NA;AACA;AACA;AACA;AACa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA,oDAAoD,oBAAoB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AClEM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;AChCP;AACA;AACA,EAAE,KAA4D,GAAG,cAAc;AAC/E,EAAE,SACsD;AACxD,CAAC,qBAAqB;;AAEtB;AACA,gCAAgC,UAAU;AAC1C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf,cAAc;AACd,cAAc;AACd,gBAAgB;AAChB,eAAe;AACf,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,oBAAoB;AACpB,oBAAoB;AACpB,uBAAuB,oBAAoB,KAAK;AAChD,yBAAyB;AACzB,yBAAyB;AACzB,qBAAqB;;AAErB;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0DAA0D;AAC1D;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mDAAmD,iBAAiB;AACpE;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO,wCAAwC;AAC/C;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,eAAe;AAC7D;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,eAAe;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,WAAW,UAAU,SAAS,KAAK,oBAAoB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;ACnuBY;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,sBAAsB,mBAAO,CAAC,GAAe;AAC7C,mBAAmB,mBAAO,CAAC,GAAY;AACvC,mBAAmB,mBAAO,CAAC,GAAY;AACvC,eAAe,mBAAO,CAAC,GAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oBAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AClUM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,eAAe,mBAAO,CAAC,GAAQ;AAC/B,eAAe,mBAAO,CAAC,GAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AC9BM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,qBAAqB,mBAAO,CAAC,GAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,wBAAwB,mBAAO,CAAC,EAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,yBAAyB;AACzB;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI,GAAG,oBAAoB;AAChE;AACA;AACA;AACA;AACA,qBAAqB,WAAW,EAAE,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;AC3Fa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,8BAA8B,mBAAO,CAAC,GAAwB;AAC9D,eAAe,mBAAO,CAAC,GAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACjCM;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,OAAO;AACP,yBAAyB,mBAAO,CAAC,GAAgB;AACjD,mBAAmB,mBAAO,CAAC,GAAU;AACrC,wBAAwB,mBAAO,CAAC,GAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,GAAG,+CAA+C;AAClG;AACA;AACA,+BAA+B,iBAAiB,GAAG,0BAA0B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,eAAe,KAAK;AACpB,qCAAqC,KAAK;AAC1C,sCAAsC,UAAU;AAChD,uBAAuB,UAAU;AACjC;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,OAAO;;;;;;;;;ACvHM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AC7BM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACfM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACXM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,gCAAgC,mBAAO,CAAC,EAA0B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AChBM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,mBAAmB,mBAAO,CAAC,GAAY;AACvC,uBAAuB,mBAAO,CAAC,EAAgB;AAC/C,gCAAgC,mBAAO,CAAC,EAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wBAAwB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,wBAAwB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AChLM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;ACRP,iC;;;;;;;;ACAa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,8BAA8B,mBAAO,CAAC,GAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACXM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sBAAsB,mBAAO,CAAC,GAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,eAAe,mBAAO,CAAC,GAAQ;AAC/B,eAAe,mBAAO,CAAC,GAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;AChEP,+B;;;;;;;;ACAa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACXP;AACA;AACA;AACA;AACa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,cAAc,mBAAO,CAAC,GAAoB;AAC1C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,eAAe,mBAAO,CAAC,GAAqB;AAC5C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,qBAAqB,mBAAO,CAAC,GAA2B;AACxD,eAAe,mBAAO,CAAC,GAAqB;AAC5C,sBAAsB,mBAAO,CAAC,GAA4B;AAC1D,kBAAkB,mBAAO,CAAC,CAAwB;AAClD,eAAe,mqCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACzNM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,mBAAmB,mBAAO,CAAC,GAAa;AACxC,8BAA8B,mBAAO,CAAC,GAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACzBM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,0BAA0B,mBAAO,CAAC,GAAoB;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB;AAC7C;AACA,qBAAqB,UAAU;AAC/B;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AC1FM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sBAAsB,mBAAO,CAAC,GAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRP;AACA;AACA;AACA;AACa;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,kBAAkB,mBAAO,CAAC,GAAW;AACrC,0BAA0B,mBAAO,CAAC,GAAmB;AACrD,sBAAsB,mBAAO,CAAC,GAAe;AAC7C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,eAAe,mBAAO,CAAC,GAAqB;AAC5C,cAAc,mBAAO,CAAC,GAAoB;AAC1C,qBAAqB,mBAAO,CAAC,GAA2B;AACxD,eAAe,mBAAO,CAAC,GAAqB;AAC5C,sBAAsB,mBAAO,CAAC,GAA4B;AAC1D,gBAAgB,mBAAO,CAAC,GAAsB;AAC9C,kBAAkB,mBAAO,CAAC,CAAwB;AAClD,cAAc,mBAAO,CAAC,GAAoB;AAC1C,gBAAgB,mBAAO,CAAC,GAAsB;AAC9C,qBAAqB,mBAAO,CAAC,GAA2B;AACxD,kBAAkB,mBAAO,CAAC,GAAwB;AAClD,eAAe,mBAAO,CAAC,GAAqB;AAC5C,iBAAiB,mBAAO,CAAC,GAAuB;AAChD,qBAAqB,mBAAO,CAAC,GAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mBAAmB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,mBAAmB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mBAAmB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,mBAAmB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mBAAmB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;AChZM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,sBAAsB,mBAAO,CAAC,GAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACRM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACpBM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,eAAe,mBAAO,CAAC,GAAQ;AAC/B,eAAe,mBAAO,CAAC,GAAQ;AAC/B,mBAAmB,mBAAO,CAAC,GAAY;AACvC,mBAAmB,mBAAO,CAAC,GAAY;AACvC,eAAe,mBAAO,CAAC,GAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,wDAAwD,qBAAquBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,qBAAquBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACzkBM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,eAAe,mBAAO,CAAC,GAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,kBAAkyDAAyD,kBAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACtUM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D;AACA;AACA;AACA;AACA,sCAAsC,mBAAO,CAAC,EAA6B;AAC3E,gCAAgC,mBAAO,CAAC,EAA0B;AACluBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;;;;;;;;ACrMM;AACb,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,GAAY;AACrC,OAAO;AACP,qBAAqB,mBAAO,CAAC,EAAgB;AAC7C,OAAO;AACP,kBAAkB,mBAAO,CAAC,GAAW;AACrC,OAAO;AACP,iBAAiB,mBAAO,CAAC,GAAU;AACnC,aAAa,mBAAO,CAAC,GAAQ;AAC7B,OAAO;AACP,sBAAsB,mBAAO,CAAC,GAAe;AAC7C,OAAO;AACP,aAAa,mBAAO,CAAC,GAAQ;AAC7B,OAAO;AACP,0BAA0B,mBAAO,CAAC,GAAmB;AACrD,OAAO;AACP,iBAAiB,mBAAO,CAAC,GAAY;AACrC,OAAO;AACP,iBAAiB,mBAAO,CAAC,GAAY;AACrC,OAAO;AACP,YAAY,mBAAO,CAAC,GAAoB;AACxC,OAAO;AACP,cAAc,mBAAO,CAAC,GAAoB;AAC1C,OAAO;AACP,cAAc,mBAAO,CAAC,GAAoB;AAC1C,OAAO;AACP,eAAe,mBAAO,CAAC,GAAqB;AAC5C,OAAO;AACP,qBAAqB,mBAAO,CAAC,GAA2B;AACxD,OAAO;AACP,cAAc,mBAAO,CAAC,GAAoB;AAC1C,OAAO;AACP,eAAe,mBAAO,CAAC,GAAqB;AAC5C,OAAO;AACP,sBAAsB,mBAAO,CAAC,GAA4B;AAC1D,OAAO;AACP,wBAAwB,mBAAO,CAAC,GAAmB;AACnD,OAAO;AACP,cAAc,mBAAO,CAAC,GAAsB;AAC5C,OAAO;AACP,8BAA8B,mBAAO,CAAC,EAAyB;AAC/D,OAAO;AACP,gBAAgB,mBAAO,CAAC,CAAwB;AAChD,OAAO;AACP,4BAA4B,mBAAO,CAAC,GAAuB;AAC3D,OAAO;AACP,cAAc,mBAAO,CAAC,GAAsB;AAC5C,OAAO;AACP,mBAAmB,mBAAO,CAAC,GAA2B;AACtD,OAAO;AACP,aAAa,mBAAO,CAAC,GAAqB;AAC1C,OAAO;AACP,eAAe,mBAAO,CAAC,GAAuB;AAC9C,OAAO;AACP,gBAAgB,mBAAO,CAAC,GAAwB;AAChD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,YAAY,OAAO,aAAa,OAAO,aAAa;AACrD;AACA;AACA;AACA;AACA,CAAC,cAAc,OAAO,eAAe,OAAO,eAAe;AAC3D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,qBAAqB,OAAO,sBAAsB,OAAO,sBAAsB","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t__webpack_require__.ab = __dirname + \"/\";\n\n \t// the startup function\n \tfunction startup() {\n \t\t// Load entry module and return exports\n \t\treturn __webpack_require__(109);\n \t};\n\n \t// run startup\n \treturn startup();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst parser_1 = require(\"../parser\");\nconst instruction_1 = require(\"../instruction\");\nclass Onbuild extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getTrigger() {\n        let trigger = this.getTriggerWord();\n        return trigger === null ? null : trigger.toUpperCase();\n    }\n    getTriggerWord() {\n        return this.getRangeContent(this.getTriggerRange());\n    }\n    getTriggerRange() {\n        let args = this.getArguments();\n        return args.length > 0 ? args[0].getRange() : null;\n    }\n    getTriggerInstruction() {\n        let triggerRange = this.getTriggerRange();\n        if (triggerRange === null) {\n            return null;\n        }\n        let args = this.getArguments();\n        return parser_1.Parser.createInstruction(this.document, this.dockerfile, this.escapeChar, vscode_languageserver_types_1.Range.create(args[0].getRange().start, this.getRange().end), this.getTriggerWord(), triggerRange);\n    }\n}\nexports.Onbuild = Onbuild;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst argument_1 = require(\"./argument\");\nclass JSONArgument extends argument_1.Argument {\n    constructor(value, range, jsonRange) {\n        super(value, range);\n        this.jsonRange = jsonRange;\n    }\n    getJSONRange() {\n        return this.jsonRange;\n    }\n    getJSONValue() {\n        let value = super.getValue();\n        value = value.substring(1, value.length - 1);\n        return value;\n    }\n}\nexports.JSONArgument = JSONArgument;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst flag_1 = require(\"./flag\");\nconst instruction_1 = require(\"./instruction\");\nclass ModifiableInstruction extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getFlags() {\n        if (!this.flags) {\n            this.flags = [];\n            for (let arg of this.getArguments()) {\n                let value = arg.getValue();\n                if (this.stopSearchingForFlags(value)) {\n                    return this.flags;\n                }\n                else if (value.indexOf(\"--\") === 0) {\n                    let range = arg.getRange();\n                    let rawValue = this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n                    let nameIndex = value.indexOf('=');\n                    let index = rawValue.indexOf('=');\n                    let firstMatch = false;\n                    let secondMatch = false;\n                    let startIndex = -1;\n                    nameSearchLoop: for (let i = 0; i < rawValue.length; i++) {\n                        switch (rawValue.charAt(i)) {\n                            case '\\\\':\n                            case ' ':\n                            case '\\t':\n                            case '\\r':\n                            case '\\n':\n                                break;\n                            case '-':\n                                if (secondMatch) {\n                                    startIndex = i;\n                                    break nameSearchLoop;\n                                }\n                                else if (firstMatch) {\n                                    secondMatch = true;\n                                }\n                                else {\n                                    firstMatch = true;\n                                }\n                                break;\n                            default:\n                                startIndex = i;\n                                break nameSearchLoop;\n                        }\n                    }\n                    let nameStart = this.document.positionAt(this.document.offsetAt(range.start) + startIndex);\n                    if (index === -1) {\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2), vscode_languageserver_types_1.Range.create(nameStart, range.end), null, null));\n                    }\n                    else if (index === value.length - 1) {\n                        let nameEnd = this.document.positionAt(this.document.offsetAt(range.start) + index);\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2, index), vscode_languageserver_types_1.Range.create(nameStart, nameEnd), \"\", vscode_languageserver_types_1.Range.create(range.end, range.end)));\n                    }\n                    else {\n                        let nameEnd = this.document.positionAt(this.document.offsetAt(range.start) + index);\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2, nameIndex), vscode_languageserver_types_1.Range.create(nameStart, nameEnd), value.substring(nameIndex + 1), vscode_languageserver_types_1.Range.create(this.document.positionAt(this.document.offsetAt(range.start) + index + 1), range.end)));\n                    }\n                }\n            }\n        }\n        return this.flags;\n    }\n    getArguments() {\n        const args = super.getArguments();\n        const flags = this.getFlags();\n        if (flags.length === 0) {\n            return args;\n        }\n        for (let i = 0; i < flags.length; i++) {\n            args.shift();\n        }\n        return args;\n    }\n}\nexports.ModifiableInstruction = ModifiableInstruction;\n","module.exports = require(\"os\");",null,"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = require(\"@actions/core\");\nconst child_process_1 = require(\"child_process\");\nconst obfuscator_1 = require(\"./obfuscator\");\n// import {readFileSync, writeFileSync} from 'fs';\nconst fs_1 = require(\"fs\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            // exec(\n            //   \"mkdir __condom__; tar -cf -  --exclude '__condom__' . | tar -xC __condom__\",\n            //   (error, stdout, stderr) => debug(stdout)\n            // );\n            // exec('ls -lh __condom__', (error, stdout, stderr) => debug(stdout));\n            const dockerFile = yield fs_1.promises.readFile('Dockerfile');\n            console.log(dockerFile.toString());\n            const obf = new obfuscator_1.Obfuscator(dockerFile.toString());\n            yield obf.compile('csteps');\n            const newDockerFile = obf.dumpEncrypted();\n            yield fs_1.promises.writeFile('Dockerfile', newDockerFile);\n            child_process_1.exec('cat Dockerfile', (error, stdout, stderr) => core_1.debug(stdout));\n            child_process_1.exec('sync; ls -lh', (error, stdout, stderr) => core_1.debug(stdout));\n            core_1.debug(obf.dumpC());\n            const branch = core_1.getInput('branch');\n            core_1.debug(`Will write to branch ${branch} `); // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true\n        }\n        catch (error) {\n            // setFailed(error.message);\n        }\n    });\n}\nrun();\n","module.exports = require(\"child_process\");","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst ast = require(\"./main\");\nconst imageTemplate_1 = require(\"./imageTemplate\");\nconst from_1 = require(\"./instructions/from\");\nconst util_1 = require(\"./util\");\nconst main_1 = require(\"./main\");\nclass Dockerfile extends imageTemplate_1.ImageTemplate {\n    constructor(document) {\n        super();\n        this.initialInstructions = new imageTemplate_1.ImageTemplate();\n        this.buildStages = [];\n        this.directives = [];\n        /**\n         * Whether a FROM instruction has been added to this Dockerfile or not.\n         */\n        this.foundFrom = false;\n        this.document = document;\n    }\n    getEscapeCharacter() {\n        for (const directive of this.directives) {\n            if (directive.getDirective() === ast.Directive.escape) {\n                const value = directive.getValue();\n                if (value === '\\\\' || value === '`') {\n                    return value;\n                }\n            }\n        }\n        return '\\\\';\n    }\n    getInitialARGs() {\n        return this.initialInstructions.getARGs();\n    }\n    getContainingImage(position) {\n        let range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), this.document.positionAt(this.document.getText().length));\n        if (!util_1.Util.isInsideRange(position, range)) {\n            // not inside the document, invalid position\n            return null;\n        }\n        if (this.initialInstructions.getComments().length > 0 || this.initialInstructions.getInstructions().length > 0) {\n            if (util_1.Util.isInsideRange(position, this.initialInstructions.getRange())) {\n                return this.initialInstructions;\n            }\n        }\n        for (const buildStage of this.buildStages) {\n            if (util_1.Util.isInsideRange(position, buildStage.getRange())) {\n                return buildStage;\n            }\n        }\n        return this;\n    }\n    addInstruction(instruction) {\n        if (instruction.getKeyword() === main_1.Keyword.FROM) {\n            this.currentBuildStage = new imageTemplate_1.ImageTemplate();\n            this.buildStages.push(this.currentBuildStage);\n            this.foundFrom = true;\n        }\n        else if (!this.foundFrom) {\n            this.initialInstructions.addInstruction(instruction);\n        }\n        if (this.foundFrom) {\n            this.currentBuildStage.addInstruction(instruction);\n        }\n        super.addInstruction(instruction);\n    }\n    setDirectives(directives) {\n        this.directives = directives;\n    }\n    getDirective() {\n        return this.directives.length === 0 ? null : this.directives[0];\n    }\n    getDirectives() {\n        return this.directives;\n    }\n    resolveVariable(variable, line) {\n        for (let from of this.getFROMs()) {\n            let range = from.getRange();\n            if (range.start.line <= line && line <= range.end.line) {\n                // resolve the FROM variable against the initial ARGs\n                let initialARGs = new imageTemplate_1.ImageTemplate();\n                for (let instruction of this.initialInstructions.getARGs()) {\n                    initialARGs.addInstruction(instruction);\n                }\n                return initialARGs.resolveVariable(variable, line);\n            }\n        }\n        let image = this.getContainingImage(vscode_languageserver_types_1.Position.create(line, 0));\n        if (image === null) {\n            return undefined;\n        }\n        let resolvedVariable = image.resolveVariable(variable, line);\n        if (resolvedVariable === null) {\n            // refers to an uninitialized ARG variable,\n            // try resolving it against the initial ARGs then\n            let initialARGs = new imageTemplate_1.ImageTemplate();\n            for (let instruction of this.initialInstructions.getARGs()) {\n                initialARGs.addInstruction(instruction);\n            }\n            return initialARGs.resolveVariable(variable, line);\n        }\n        return resolvedVariable;\n    }\n    getAvailableVariables(currentLine) {\n        if (this.getInstructionAt(currentLine) instanceof from_1.From) {\n            let variables = [];\n            for (let arg of this.getInitialARGs()) {\n                let property = arg.getProperty();\n                if (property) {\n                    variables.push(property.getName());\n                }\n            }\n            return variables;\n        }\n        let image = this.getContainingImage(vscode_languageserver_types_1.Position.create(currentLine, 0));\n        return image ? image.getAvailableVariables(currentLine) : [];\n    }\n    /**\n     * Internally reorganize the comments in the Dockerfile and allocate\n     * them to the relevant build stages that they belong to.\n     */\n    organizeComments() {\n        const comments = this.getComments();\n        for (let i = 0; i < comments.length; i++) {\n            if (util_1.Util.isInsideRange(comments[i].getRange().end, this.initialInstructions.getRange())) {\n                this.initialInstructions.addComment(comments[i]);\n            }\n            else {\n                for (const buildStage of this.buildStages) {\n                    if (util_1.Util.isInsideRange(comments[i].getRange().start, buildStage.getRange())) {\n                        buildStage.addComment(comments[i]);\n                    }\n                }\n            }\n        }\n    }\n    getRange() {\n        const comments = this.getComments();\n        const instructions = this.getInstructions();\n        let range = null;\n        if (comments.length === 0) {\n            if (instructions.length > 0) {\n                range = vscode_languageserver_types_1.Range.create(instructions[0].getRange().start, instructions[instructions.length - 1].getRange().end);\n            }\n        }\n        else if (instructions.length === 0) {\n            range = vscode_languageserver_types_1.Range.create(comments[0].getRange().start, comments[comments.length - 1].getRange().end);\n        }\n        else {\n            const commentStart = comments[0].getRange().start;\n            const commentEnd = comments[comments.length - 1].getRange().end;\n            const instructionStart = instructions[0].getRange().start;\n            const instructionEnd = instructions[instructions.length - 1].getRange().end;\n            if (commentStart.line < instructionStart.line) {\n                if (commentEnd.line < instructionEnd.line) {\n                    range = vscode_languageserver_types_1.Range.create(commentStart, instructionEnd);\n                }\n                range = vscode_languageserver_types_1.Range.create(commentStart, commentEnd);\n            }\n            else if (commentEnd.line < instructionEnd.line) {\n                range = vscode_languageserver_types_1.Range.create(instructionStart, instructionEnd);\n            }\n            else {\n                range = vscode_languageserver_types_1.Range.create(instructionStart, commentEnd);\n            }\n        }\n        if (range === null) {\n            if (this.directives.length === 0) {\n                return null;\n            }\n            return this.directives[0].getRange();\n        }\n        else if (this.directives.length === 0) {\n            return range;\n        }\n        return vscode_languageserver_types_1.Range.create(this.directives[0].getRange().start, range.end);\n    }\n}\nexports.Dockerfile = Dockerfile;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = command_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    command_1.issueCommand('add-path', {}, inputPath);\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Util {\n    static isWhitespace(char) {\n        return char === ' ' || char === '\\t' || Util.isNewline(char);\n    }\n    static isNewline(char) {\n        return char === '\\r' || char === '\\n';\n    }\n    static findLeadingNonWhitespace(content, escapeChar) {\n        whitespaceCheck: for (let i = 0; i < content.length; i++) {\n            switch (content.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    continue;\n                case escapeChar:\n                    escapeCheck: for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                // offset one more for \\r\\n\n                                i = j + 1;\n                                continue whitespaceCheck;\n                            case '\\n':\n                                i = j;\n                                continue whitespaceCheck;\n                            default:\n                                break escapeCheck;\n                        }\n                    }\n                    // found an escape character and then reached EOF\n                    return -1;\n                default:\n                    return i;\n            }\n        }\n        // only possible if the content is the empty string\n        return -1;\n    }\n    /**\n     * Determines if the given position is contained within the given range.\n     *\n     * @param position the position to check\n     * @param range the range to see if the position is inside of\n     */\n    static isInsideRange(position, range) {\n        if (range.start.line === range.end.line) {\n            return range.start.line === position.line\n                && range.start.character <= position.character\n                && position.character <= range.end.character;\n        }\n        else if (range.start.line === position.line) {\n            return range.start.character <= position.character;\n        }\n        else if (range.end.line === position.line) {\n            return position.character <= range.end.character;\n        }\n        return range.start.line < position.line && position.line < range.end.line;\n    }\n}\nexports.Util = Util;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass FlagOption {\n    constructor(range, name, nameRange, value, valueRange) {\n        this.range = range;\n        this.name = name;\n        this.nameRange = nameRange;\n        this.value = value;\n        this.valueRange = valueRange;\n    }\n    toString() {\n        if (this.valueRange !== null) {\n            return this.name + \"=\" + this.value;\n        }\n        return this.name;\n    }\n    getRange() {\n        return this.range;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValue() {\n        return this.value;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n}\nexports.FlagOption = FlagOption;\n","// This file has been generated from mustache.mjs\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Mustache = factory());\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      return this.renderTokens(this.parse(indentedValue, tags), context, partials, indentedValue, tags);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.0.1',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst instruction_1 = require(\"./instruction\");\nconst property_1 = require(\"./property\");\nconst argument_1 = require(\"./argument\");\nconst util_1 = require(\"./util\");\nclass PropertyInstruction extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.properties = undefined;\n    }\n    getProperties() {\n        if (this.properties === undefined) {\n            let args = this.getPropertyArguments();\n            if (args.length === 0) {\n                this.properties = [];\n            }\n            else if (args.length === 1) {\n                this.properties = [new property_1.Property(this.document, this.escapeChar, args[0])];\n            }\n            else if (args.length === 2) {\n                if (args[0].getValue().indexOf('=') === -1) {\n                    this.properties = [new property_1.Property(this.document, this.escapeChar, args[0], args[1])];\n                }\n                else {\n                    this.properties = [\n                        new property_1.Property(this.document, this.escapeChar, args[0]),\n                        new property_1.Property(this.document, this.escapeChar, args[1])\n                    ];\n                }\n            }\n            else if (args[0].getValue().indexOf('=') === -1) {\n                let text = this.document.getText();\n                let start = args[1].getRange().start;\n                let end = args[args.length - 1].getRange().end;\n                text = text.substring(this.document.offsetAt(start), this.document.offsetAt(end));\n                this.properties = [new property_1.Property(this.document, this.escapeChar, args[0], new argument_1.Argument(text, vscode_languageserver_types_1.Range.create(args[1].getRange().start, args[args.length - 1].getRange().end)))];\n            }\n            else {\n                this.properties = [];\n                for (let i = 0; i < args.length; i++) {\n                    this.properties.push(new property_1.Property(this.document, this.escapeChar, args[i]));\n                }\n            }\n        }\n        return this.properties;\n    }\n    /**\n     * Goes from the back of the string and returns the first\n     * non-whitespace character that is found. If an escape character\n     * is found with newline characters, the escape character will\n     * not be considered a non-whitespace character and its index in\n     * the string will not be returned.\n     *\n     * @param content the string to search through\n     * @return the index in the string for the first non-whitespace\n     *         character when searching from the end of the string\n     */\n    findTrailingNonWhitespace(content) {\n        // loop back to find the first non-whitespace character\n        let index = content.length;\n        whitespaceCheck: for (let i = content.length - 1; i >= 0; i--) {\n            switch (content.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    continue;\n                case '\\n':\n                    if (content.charAt(i - 1) === '\\r') {\n                        i = i - 1;\n                    }\n                case '\\r':\n                    newlineCheck: for (let j = i - 1; j >= 0; j--) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                            case '\\r':\n                            case '\\n':\n                            case this.escapeChar:\n                                continue;\n                            default:\n                                index = j;\n                                break newlineCheck;\n                        }\n                    }\n                    break whitespaceCheck;\n                default:\n                    index = i;\n                    break whitespaceCheck;\n            }\n        }\n        return index;\n    }\n    getPropertyArguments() {\n        const args = [];\n        let range = this.getInstructionRange();\n        let instructionNameEndOffset = this.document.offsetAt(range.end);\n        let extra = instructionNameEndOffset - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra);\n        let start = util_1.Util.findLeadingNonWhitespace(fullArgs, this.escapeChar);\n        if (start === -1) {\n            // only whitespace found, no arguments\n            return [];\n        }\n        const startPosition = this.document.positionAt(instructionNameEndOffset + start);\n        // records whether the parser has just processed an escaped newline or not,\n        // if our starting position is not on the same line as the instruction then\n        // the start of the content is already on an escaped line\n        let escaped = range.start.line !== startPosition.line;\n        // flag to track if the last character was an escape character\n        let endingEscape = false;\n        // position before the first escape character was hit\n        let mark = -1;\n        let end = this.findTrailingNonWhitespace(fullArgs);\n        content = fullArgs.substring(start, end + 1);\n        let argStart = escaped ? -1 : 0;\n        let spaced = false;\n        argumentLoop: for (let i = 0; i < content.length; i++) {\n            let char = content.charAt(i);\n            switch (char) {\n                case this.escapeChar:\n                    if (i + 1 === content.length) {\n                        endingEscape = true;\n                        break argumentLoop;\n                    }\n                    if (!escaped) {\n                        mark = i;\n                    }\n                    switch (content.charAt(i + 1)) {\n                        case ' ':\n                        case '\\t':\n                            if (!util_1.Util.isWhitespace(content.charAt(i + 2))) {\n                                // space was escaped, continue as normal\n                                i = i + 1;\n                                continue argumentLoop;\n                            }\n                            // whitespace encountered, need to figure out if it extends to EOL\n                            whitespaceCheck: for (let j = i + 2; j < content.length; j++) {\n                                switch (content.charAt(j)) {\n                                    case '\\r':\n                                        // offset one more for \\r\\n\n                                        j++;\n                                    case '\\n':\n                                        // whitespace only, safe to skip\n                                        escaped = true;\n                                        i = j;\n                                        continue argumentLoop;\n                                    case ' ':\n                                    case '\\t':\n                                        // ignore whitespace\n                                        break;\n                                    default:\n                                        // whitespace doesn't extend to EOL, create an argument\n                                        args.push(new argument_1.Argument(content.substring(argStart, i), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + i + 2))));\n                                        argStart = j;\n                                        break whitespaceCheck;\n                                }\n                            }\n                            // go back and start processing the encountered non-whitespace character\n                            i = argStart - 1;\n                            continue argumentLoop;\n                        case '\\r':\n                            // offset one more for \\r\\n\n                            i++;\n                        case '\\n':\n                            // immediately followed by a newline, skip the newline\n                            escaped = true;\n                            i = i + 1;\n                            continue argumentLoop;\n                        case this.escapeChar:\n                            // double escape found, skip it and move on\n                            if (argStart === -1) {\n                                argStart = i;\n                            }\n                            i = i + 1;\n                            continue argumentLoop;\n                        default:\n                            if (argStart === -1) {\n                                argStart = i;\n                            }\n                            // non-whitespace encountered, skip the escape and process the\n                            // character normally\n                            continue argumentLoop;\n                    }\n                case '\\'':\n                case '\"':\n                    if (argStart === -1) {\n                        argStart = i;\n                    }\n                    for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case char:\n                                if (content.charAt(j + 1) !== ' ' && content.charAt(j + 1) !== '') {\n                                    // there is more content after this quote,\n                                    // continue so that it is all processed as\n                                    // one single argument\n                                    i = j;\n                                    continue argumentLoop;\n                                }\n                                args.push(new argument_1.Argument(content.substring(argStart, j + 1), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + j + 1))));\n                                i = j;\n                                argStart = -1;\n                                continue argumentLoop;\n                            case this.escapeChar:\n                                j++;\n                                break;\n                        }\n                    }\n                    break argumentLoop;\n                case ' ':\n                case '\\t':\n                    if (escaped) {\n                        // consider there to be a space only if an argument\n                        // is not spanning multiple lines\n                        if (argStart !== -1) {\n                            spaced = true;\n                        }\n                    }\n                    else if (argStart !== -1) {\n                        args.push(new argument_1.Argument(content.substring(argStart, i), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + i))));\n                        argStart = -1;\n                    }\n                    break;\n                case '\\r':\n                    // offset one more for \\r\\n\n                    i++;\n                case '\\n':\n                    spaced = false;\n                    break;\n                case '#':\n                    if (escaped) {\n                        // a newline was escaped and now there's a comment\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    spaced = false;\n                                    continue argumentLoop;\n                            }\n                        }\n                        // went to the end without finding a newline,\n                        // the comment was the last line in the instruction,\n                        // just stop parsing, create an argument if needed\n                        if (argStart !== -1) {\n                            let value = content.substring(argStart, mark);\n                            args.push(new argument_1.Argument(value, vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + mark))));\n                            argStart = -1;\n                        }\n                        break argumentLoop;\n                    }\n                    else if (argStart === -1) {\n                        argStart = i;\n                    }\n                    break;\n                default:\n                    if (spaced) {\n                        if (argStart !== -1) {\n                            args.push(new argument_1.Argument(content.substring(argStart, mark), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + mark))));\n                            argStart = -1;\n                        }\n                        spaced = false;\n                    }\n                    escaped = false;\n                    if (argStart === -1) {\n                        argStart = i;\n                    }\n                    // variable detected\n                    if (char === '$' && content.charAt(i + 1) === '{') {\n                        let singleQuotes = false;\n                        let doubleQuotes = false;\n                        let escaped = false;\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case this.escapeChar:\n                                    escaped = true;\n                                    break;\n                                case '\\r':\n                                case '\\n':\n                                    break;\n                                case '\\'':\n                                    singleQuotes = !singleQuotes;\n                                    escaped = false;\n                                    break;\n                                case '\"':\n                                    doubleQuotes = !doubleQuotes;\n                                    escaped = false;\n                                    break;\n                                case ' ':\n                                case '\\t':\n                                    if (escaped || singleQuotes || doubleQuotes) {\n                                        break;\n                                    }\n                                    i = j - 1;\n                                    continue argumentLoop;\n                                case '}':\n                                    i = j;\n                                    continue argumentLoop;\n                                default:\n                                    escaped = false;\n                                    break;\n                            }\n                        }\n                        break argumentLoop;\n                    }\n                    break;\n            }\n        }\n        if (argStart !== -1 && argStart !== content.length) {\n            let end = endingEscape ? content.length - 1 : content.length;\n            let value = content.substring(argStart, end);\n            args.push(new argument_1.Argument(value, vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + end))));\n        }\n        return args;\n    }\n}\nexports.PropertyInstruction = PropertyInstruction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst main_1 = require(\"./main\");\nconst line_1 = require(\"./line\");\nclass ParserDirective extends line_1.Line {\n    constructor(document, range, nameRange, valueRange) {\n        super(document, range);\n        this.nameRange = nameRange;\n        this.valueRange = valueRange;\n    }\n    toString() {\n        return \"# \" + this.getName() + '=' + this.getValue();\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n    getName() {\n        return this.document.getText().substring(this.document.offsetAt(this.nameRange.start), this.document.offsetAt(this.nameRange.end));\n    }\n    getValue() {\n        return this.document.getText().substring(this.document.offsetAt(this.valueRange.start), this.document.offsetAt(this.valueRange.end));\n    }\n    getDirective() {\n        const directive = main_1.Directive[this.getName().toLowerCase()];\n        return directive === undefined ? null : directive;\n    }\n}\nexports.ParserDirective = ParserDirective;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst flagOption_1 = require(\"./flagOption\");\nclass Flag {\n    constructor(document, range, name, nameRange, value, valueRange) {\n        this.options = [];\n        this.range = range;\n        this.name = name;\n        this.nameRange = nameRange;\n        this.value = value;\n        this.valueRange = valueRange;\n        if (this.value !== null) {\n            let offset = document.offsetAt(valueRange.start);\n            let nameStart = -1;\n            let valueStart = -1;\n            let hasOptions = false;\n            for (let i = 0; i < value.length; i++) {\n                switch (value.charAt(i)) {\n                    case '=':\n                        hasOptions = true;\n                        if (valueStart === -1) {\n                            valueStart = i + 1;\n                            break;\n                        }\n                        break;\n                    case ',':\n                        this.options.push(this.createFlagOption(document, value, offset, nameStart, valueStart, i));\n                        nameStart = -1;\n                        valueStart = -1;\n                        break;\n                    default:\n                        if (nameStart === -1) {\n                            nameStart = i;\n                        }\n                        break;\n                }\n            }\n            if (hasOptions && nameStart !== -1) {\n                this.options.push(this.createFlagOption(document, value, offset, nameStart, valueStart, value.length));\n            }\n        }\n    }\n    createFlagOption(document, content, documentOffset, nameStart, valueStart, valueEnd) {\n        const optionRange = vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + nameStart), document.positionAt(documentOffset + valueEnd));\n        if (valueStart === -1) {\n            return new flagOption_1.FlagOption(optionRange, content.substring(nameStart, valueEnd), optionRange, null, null);\n        }\n        return new flagOption_1.FlagOption(optionRange, content.substring(nameStart, valueStart - 1), vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + nameStart), document.positionAt(documentOffset + valueStart - 1)), content.substring(valueStart, valueEnd), vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + valueStart), document.positionAt(documentOffset + valueEnd)));\n    }\n    toString() {\n        if (this.valueRange) {\n            return \"--\" + this.name + \"=\" + this.value;\n        }\n        return \"--\" + this.name;\n    }\n    /**\n     * Returns the range that encompasses this entire flag. This includes the\n     * -- prefix in the beginning to the last character of the flag's value (if\n     * it has been defined).\n     *\n     * @return the entire range of this flag\n     */\n    getRange() {\n        return this.range;\n    }\n    /**\n     * Returns the name of this flag. The name does not include the -- prefix.\n     * Thus, for HEALTHCHECK's --interval flag, interval is the flag's name and\n     * not --interval.\n     *\n     * @return this flag's name\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Returns the range that encompasses the flag's name\n     *\n     * @return the range containing the flag's name\n     */\n    getNameRange() {\n        return this.nameRange;\n    }\n    /**\n     * Returns the value that has been set to this flag. May be null if the\n     * flag is invalid and has no value set like a --start-period. If the flag\n     * is instead a --start-period= with an equals sign then the flag's value\n     * is the empty string.\n     *\n     * @return this flag's value if it has been defined, null otherwise\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Returns the range that encompasses this flag's value. If no value has\n     * been set then null will be returned.\n     *\n     * @return the range containing this flag's value, or null if the flag\n     *         has no value defined\n     */\n    getValueRange() {\n        return this.valueRange;\n    }\n    getOption(name) {\n        for (const option of this.options) {\n            if (option.getName() === name) {\n                return option;\n            }\n        }\n        return null;\n    }\n    getOptions() {\n        return this.options;\n    }\n    hasOptions() {\n        return this.options.length > 0;\n    }\n}\nexports.Flag = Flag;\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\nfunction escapeData(s) {\n    return toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst propertyInstruction_1 = require(\"../propertyInstruction\");\nconst util_1 = require(\"../util\");\nclass Label extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getVariables() {\n        const variables = super.getVariables();\n        const properties = this.getProperties();\n        // iterate over all of this LABEL's properties\n        for (const property of properties) {\n            const value = property.getUnescapedValue();\n            // check if the value is contained in single quotes,\n            // single quotes would indicate a literal value\n            if (value !== null && value.length > 2 && value.charAt(0) === '\\'' && value.charAt(value.length - 1) === '\\'') {\n                const range = property.getValueRange();\n                for (let i = 0; i < variables.length; i++) {\n                    // if a variable is in a single quote, remove it from the list\n                    if (util_1.Util.isInsideRange(variables[i].getRange().start, range)) {\n                        variables.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return variables;\n    }\n    getProperties() {\n        return super.getProperties();\n    }\n}\nexports.Label = Label;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Obfuscator = void 0;\nconst dockerfile_ast_1 = require(\"dockerfile-ast\");\nconst mustache_1 = require(\"mustache\");\nconst child_process_1 = require(\"child_process\");\nclass Obfuscator {\n    constructor(source) {\n        this.source = source;\n        this.ast = dockerfile_ast_1.DockerfileParser.parse(source);\n        this.nextNumber = 1;\n        this.commandMappings = new Map();\n    }\n    encryptCommand(cmd) {\n        if (!cmd) {\n            return '';\n        }\n        else {\n            if (this.commandMappings.has(cmd)) {\n                return (this.commandMappings.get(cmd) || 0).toString();\n            }\n            else {\n                this.commandMappings.set(cmd, this.nextNumber);\n                return `csteps ${this.nextNumber++}`;\n            }\n        }\n    }\n    dumpEncrypted() {\n        const instructions = this.ast.getInstructions();\n        const result = [];\n        for (const ins of instructions) {\n            if (ins.getKeyword() === 'RUN') {\n                result.push(`${ins.getKeyword()} ${this.encryptCommand(ins.getArgumentsContent())}`);\n            }\n            else {\n                result.push(`${ins.getKeyword()} ${ins.getArgumentsContent()}`);\n                if (ins.getKeyword() === 'FROM') {\n                    result.push('COPY csteps /usr/local/bin/');\n                }\n            }\n        }\n        return result.join('\\r\\n');\n    }\n    escape(input) {\n        return input.replace(/\"/g, '\\\\\"');\n    }\n    dumpC() {\n        const source = `\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main (int argc, char *argv[]) {\n    int cmd=0;\n    if (argc!=2) {\n        printf(\"Error in command line args\");\n        return -1;\n    }\n    cmd = atoi(argv[1]);\n    switch(cmd) {\n        {{#commands}}\n        case {{key}}:\n            printf(\"Command %d\\n\", {{key}});\n            printf(\"Command %s\\n\", {{{command}}});\n            system(\"{{{command}}}\");\n            break;\n        {{/commands}}\n        default:\n            printf(\"[Error]: unknown command: %d (%s), 1?%d  \", cmd, argv[1], cmd==1);\n            return -1;\n    }\n    return(0);\n } \n`;\n        const view = {\n            commands: Array.from(this.commandMappings, ([k, v]) => ({\n                key: v,\n                command: this.escape(k)\n            }))\n        };\n        return mustache_1.render(source, view);\n    }\n    compile(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = ['-xc', '-', '-o', path];\n            if (process.platform !== 'darwin') {\n                // Static compilation fails on mac\n                options.push('-static');\n                options.push('-static-libgcc');\n            }\n            const compiler = child_process_1.spawn('gcc', options);\n            compiler.stdout.pipe(process.stdout);\n            compiler.stderr.pipe(process.stderr);\n            compiler.stdin.write(this.dumpC());\n            compiler.stdin.end();\n            return new Promise((resolve, reject) => {\n                compiler.on('close', code => {\n                    if (code === 0) {\n                        // console.log('compilation succeeded');\n                        resolve();\n                    }\n                    else {\n                        console.log('Compilation failed with error', code);\n                        reject(code);\n                    }\n                });\n            });\n        });\n    }\n}\nexports.Obfuscator = Obfuscator;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Shell extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Shell = Shell;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Cmd extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Cmd = Cmd;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Argument {\n    constructor(value, range) {\n        this.value = value;\n        this.range = range;\n    }\n    toString() {\n        return this.value;\n    }\n    getRange() {\n        return this.range;\n    }\n    getValue() {\n        return this.value;\n    }\n    isAfter(position) {\n        if (this.range.end.line < position.line) {\n            return false;\n        }\n        return this.range.start.line > position.line ? true : this.range.start.character > position.character;\n    }\n    isBefore(position) {\n        if (this.range.start.line < position.line) {\n            return true;\n        }\n        return this.range.end.line > position.line ? false : this.range.end.character < position.character;\n    }\n}\nexports.Argument = Argument;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Copy extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n    getFromFlag() {\n        let flags = super.getFlags();\n        return flags.length === 1 && flags[0].getName() === \"from\" ? flags[0] : null;\n    }\n}\nexports.Copy = Copy;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Add extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n}\nexports.Add = Add;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst modifiableInstruction_1 = require(\"../modifiableInstruction\");\nclass Healthcheck extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        argument = argument.toUpperCase();\n        return argument === \"CMD\" || argument === \"NONE\";\n    }\n    getSubcommand() {\n        let args = this.getArguments();\n        return args.length !== 0 ? args[0] : null;\n    }\n}\nexports.Healthcheck = Healthcheck;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst argument_1 = require(\"./argument\");\nconst jsonArgument_1 = require(\"./jsonArgument\");\nconst modifiableInstruction_1 = require(\"./modifiableInstruction\");\nclass JSONInstruction extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.openingBracket = null;\n        this.closingBracket = null;\n        this.jsonStrings = [];\n        const argsContent = this.getRawArgumentsContent();\n        if (argsContent === null) {\n            return;\n        }\n        const args = this.getArguments();\n        if (args.length === 1 && args[0].getValue() === \"[]\") {\n            let argRange = args[0].getRange();\n            this.openingBracket = new argument_1.Argument(\"[\", vscode_languageserver_types_1.Range.create(argRange.start.line, argRange.start.character, argRange.start.line, argRange.start.character + 1));\n            this.closingBracket = new argument_1.Argument(\"]\", vscode_languageserver_types_1.Range.create(argRange.start.line, argRange.start.character + 1, argRange.end.line, argRange.end.character));\n            return;\n        }\n        else if (args.length === 2 && args[0].getValue() === '[' && args[1].getValue() === ']') {\n            this.openingBracket = args[0];\n            this.closingBracket = args[1];\n            return;\n        }\n        const argsOffset = document.offsetAt(this.getArgumentsRange().start);\n        let start = -1;\n        let last = \"\";\n        let quoted = false;\n        let escapedArg = \"\";\n        argsCheck: for (let i = 0; i < argsContent.length; i++) {\n            let char = argsContent.charAt(i);\n            switch (char) {\n                case '[':\n                    if (last === \"\") {\n                        this.openingBracket = new argument_1.Argument(\"[\", vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + i), document.positionAt(argsOffset + i + 1)));\n                        last = '[';\n                    }\n                    else if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else {\n                        break argsCheck;\n                    }\n                    break;\n                case '\"':\n                    if (last === '[' || last === ',') {\n                        start = i;\n                        quoted = true;\n                        last = '\"';\n                        escapedArg = escapedArg + char;\n                        continue;\n                    }\n                    else if (last === '\"') {\n                        if (quoted) {\n                            escapedArg = escapedArg + char;\n                            // quoted string done\n                            quoted = false;\n                            this.jsonStrings.push(new jsonArgument_1.JSONArgument(escapedArg, vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + start), document.positionAt(argsOffset + i + 1)), vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + start + 1), document.positionAt(argsOffset + i))));\n                            escapedArg = \"\";\n                        }\n                        else {\n                            // should be a , or a ]\n                            break argsCheck;\n                        }\n                    }\n                    else {\n                        break argsCheck;\n                    }\n                    break;\n                case ',':\n                    if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else {\n                        if (last === '\"') {\n                            last = ',';\n                        }\n                        else {\n                            break argsCheck;\n                        }\n                    }\n                    break;\n                case ']':\n                    if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else if (last !== \"\") {\n                        this.closingBracket = new argument_1.Argument(\"]\", vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + i), document.positionAt(argsOffset + i + 1)));\n                        break argsCheck;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    break;\n                case '\\\\':\n                    if (quoted) {\n                        switch (argsContent.charAt(i + 1)) {\n                            case '\"':\n                            case '\\\\':\n                                escapedArg = escapedArg + argsContent.charAt(i + 1);\n                                i++;\n                                continue;\n                            case ' ':\n                            case '\\t':\n                                escapeCheck: for (let j = i + 2; j < argsContent.length; j++) {\n                                    switch (argsContent.charAt(j)) {\n                                        case '\\r':\n                                            // offset one more for \\r\\n\n                                            j++;\n                                        case '\\n':\n                                            i = j;\n                                            continue argsCheck;\n                                        case ' ':\n                                        case '\\t':\n                                            break;\n                                        default:\n                                            break escapeCheck;\n                                    }\n                                }\n                                break;\n                            case '\\r':\n                                // offset one more for \\r\\n\n                                i++;\n                            default:\n                                i++;\n                                continue;\n                        }\n                    }\n                    else {\n                        escapeCheck: for (let j = i + 1; j < argsContent.length; j++) {\n                            switch (argsContent.charAt(j)) {\n                                case '\\r':\n                                    // offset one more for \\r\\n\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    continue argsCheck;\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                default:\n                                    break escapeCheck;\n                            }\n                        }\n                    }\n                    break argsCheck;\n                default:\n                    if (!quoted) {\n                        break argsCheck;\n                    }\n                    escapedArg = escapedArg + char;\n                    break;\n            }\n        }\n    }\n    stopSearchingForFlags(_value) {\n        return true;\n    }\n    getOpeningBracket() {\n        return this.openingBracket;\n    }\n    getJSONStrings() {\n        return this.jsonStrings;\n    }\n    getClosingBracket() {\n        return this.closingBracket;\n    }\n}\nexports.JSONInstruction = JSONInstruction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Entrypoint extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Entrypoint = Entrypoint;\n","module.exports = require(\"path\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst propertyInstruction_1 = require(\"../propertyInstruction\");\nclass Env extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getProperties() {\n        return super.getProperties();\n    }\n}\nexports.Env = Env;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst instruction_1 = require(\"../instruction\");\nclass Workdir extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Workdir = Workdir;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst line_1 = require(\"./line\");\nconst util_1 = require(\"./util\");\nclass Comment extends line_1.Line {\n    constructor(document, range) {\n        super(document, range);\n    }\n    toString() {\n        const content = this.getContent();\n        if (content) {\n            return \"# \" + content;\n        }\n        return \"#\";\n    }\n    /**\n     * Returns the content of this comment. This excludes leading and\n     * trailing whitespace as well as the # symbol. If the comment only\n     * consists of whitespace, the empty string will be returned.\n     */\n    getContent() {\n        let range = this.getContentRange();\n        if (range === null) {\n            return \"\";\n        }\n        return this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n    }\n    /**\n     * Returns a range that includes the content of the comment\n     * excluding any leading and trailing whitespace as well as the #\n     * symbol. May return null if the comment only consists of whitespace\n     * characters.\n     */\n    getContentRange() {\n        let range = this.getRange();\n        const startOffset = this.document.offsetAt(range.start);\n        let raw = this.document.getText().substring(startOffset, this.document.offsetAt(range.end));\n        let start = -1;\n        let end = -1;\n        // skip the first # symbol\n        for (let i = 1; i < raw.length; i++) {\n            if (!util_1.Util.isWhitespace(raw.charAt(i))) {\n                start = i;\n                break;\n            }\n        }\n        if (start === -1) {\n            return null;\n        }\n        // go backwards up to the first # symbol\n        for (let i = raw.length - 1; i >= 1; i--) {\n            if (!util_1.Util.isWhitespace(raw.charAt(i))) {\n                end = i + 1;\n                break;\n            }\n        }\n        return vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + start), this.document.positionAt(startOffset + end));\n    }\n}\nexports.Comment = Comment;\n","module.exports = require(\"fs\");","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Run extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n}\nexports.Run = Run;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst arg_1 = require(\"./instructions/arg\");\nconst cmd_1 = require(\"./instructions/cmd\");\nconst copy_1 = require(\"./instructions/copy\");\nconst env_1 = require(\"./instructions/env\");\nconst entrypoint_1 = require(\"./instructions/entrypoint\");\nconst from_1 = require(\"./instructions/from\");\nconst healthcheck_1 = require(\"./instructions/healthcheck\");\nconst onbuild_1 = require(\"./instructions/onbuild\");\nconst util_1 = require(\"./util\");\nclass ImageTemplate {\n    constructor() {\n        this.comments = [];\n        this.instructions = [];\n    }\n    addComment(comment) {\n        this.comments.push(comment);\n    }\n    getComments() {\n        return this.comments;\n    }\n    addInstruction(instruction) {\n        this.instructions.push(instruction);\n    }\n    getInstructions() {\n        return this.instructions;\n    }\n    getInstructionAt(line) {\n        for (let instruction of this.instructions) {\n            if (util_1.Util.isInsideRange(vscode_languageserver_types_1.Position.create(line, 0), instruction.getRange())) {\n                return instruction;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets all the ARG instructions that are defined in this image.\n     */\n    getARGs() {\n        let args = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof arg_1.Arg) {\n                args.push(instruction);\n            }\n        }\n        return args;\n    }\n    /**\n     * Gets all the CMD instructions that are defined in this image.\n     */\n    getCMDs() {\n        let cmds = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof cmd_1.Cmd) {\n                cmds.push(instruction);\n            }\n        }\n        return cmds;\n    }\n    /**\n     * Gets all the COPY instructions that are defined in this image.\n     */\n    getCOPYs() {\n        let copies = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof copy_1.Copy) {\n                copies.push(instruction);\n            }\n        }\n        return copies;\n    }\n    /**\n     * Gets all the ENTRYPOINT instructions that are defined in this image.\n     */\n    getENTRYPOINTs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof entrypoint_1.Entrypoint) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    /**\n     * Gets all the ENV instructions that are defined in this image.\n     */\n    getENVs() {\n        let args = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof env_1.Env) {\n                args.push(instruction);\n            }\n        }\n        return args;\n    }\n    /**\n     * Gets all the FROM instructions that are defined in this image.\n     */\n    getFROMs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof from_1.From) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    /**\n     * Gets all the HEALTHCHECK instructions that are defined in this image.\n     */\n    getHEALTHCHECKs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof healthcheck_1.Healthcheck) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    getOnbuildTriggers() {\n        let triggers = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof onbuild_1.Onbuild) {\n                let trigger = instruction.getTriggerInstruction();\n                if (trigger) {\n                    triggers.push(trigger);\n                }\n            }\n        }\n        return triggers;\n    }\n    getAvailableVariables(currentLine) {\n        const variables = [];\n        for (const arg of this.getARGs()) {\n            if (arg.isBefore(currentLine)) {\n                const property = arg.getProperty();\n                if (property) {\n                    const variable = property.getName();\n                    if (variables.indexOf(variable) === -1) {\n                        variables.push(variable);\n                    }\n                }\n            }\n        }\n        for (const env of this.getENVs()) {\n            if (env.isBefore(currentLine)) {\n                for (const property of env.getProperties()) {\n                    const variable = property.getName();\n                    if (variables.indexOf(variable) === -1) {\n                        variables.push(variable);\n                    }\n                }\n            }\n        }\n        return variables;\n    }\n    /**\n     * Resolves a variable with the given name at the specified line\n     * to its value. If null is returned, then the variable has been\n     * defined but no value was given. If undefined is returned, then\n     * a variable with the given name has not been defined yet as of\n     * the given line.\n     *\n     * @param variable the name of the variable to resolve\n     * @param line the line number that the variable is on, zero-based\n     * @return the value of the variable as defined by an ARG or ENV\n     *         instruction, or null if no value has been specified, or\n     *         undefined if a variable with the given name has not\n     *         been defined\n     */\n    resolveVariable(variable, line) {\n        let envs = this.getENVs();\n        for (let i = envs.length - 1; i >= 0; i--) {\n            if (envs[i].isBefore(line)) {\n                for (let property of envs[i].getProperties()) {\n                    if (property.getName() === variable) {\n                        return property.getValue();\n                    }\n                }\n            }\n        }\n        let args = this.getARGs();\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (args[i].isBefore(line)) {\n                let property = args[i].getProperty();\n                if (property && property.getName() === variable) {\n                    return property.getValue();\n                }\n            }\n        }\n        return undefined;\n    }\n    getRange() {\n        const instructions = this.getInstructions();\n        if (instructions.length === 0) {\n            // all templates should have instructions, this only happens for\n            // the initial set of instruction\n            return vscode_languageserver_types_1.Range.create(0, 0, 0, 0);\n        }\n        const instructionStart = instructions[0].getRange().start;\n        const instructionEnd = instructions[instructions.length - 1].getRange().end;\n        return vscode_languageserver_types_1.Range.create(instructionStart, instructionEnd);\n    }\n    contains(position) {\n        const range = this.getRange();\n        if (range === null) {\n            return false;\n        }\n        return util_1.Util.isInsideRange(position, range);\n    }\n}\nexports.ImageTemplate = ImageTemplate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst property_1 = require(\"../property\");\nconst propertyInstruction_1 = require(\"../propertyInstruction\");\nclass Arg extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.property = null;\n        const args = this.getPropertyArguments();\n        if (args.length === 1) {\n            this.property = new property_1.Property(this.document, this.escapeChar, args[0]);\n        }\n        else {\n            this.property = null;\n        }\n    }\n    /**\n     * Returns the variable defined by this ARG. This may be null if\n     * this ARG instruction is malformed and has no variable\n     * declaration.\n     */\n    getProperty() {\n        return this.property;\n    }\n}\nexports.Arg = Arg;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonInstruction_1 = require(\"../jsonInstruction\");\nclass Volume extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Volume = Volume;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Variable {\n    constructor(name, nameRange, range, modifier, modifierRange, substitutionParameter, substitutionRange, defined, buildVariable, stringValue) {\n        this.name = name;\n        this.nameRange = nameRange;\n        this.range = range;\n        this.modifier = modifier;\n        this.modifierRange = modifierRange;\n        this.substitutionParameter = substitutionParameter;\n        this.substitutionRange = substitutionRange;\n        this.defined = defined;\n        this.buildVariable = buildVariable;\n        this.stringValue = stringValue;\n    }\n    toString() {\n        return this.stringValue;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    /**\n     * Returns the range of the entire variable. This includes the symbols for\n     * the declaration of the variable such as the $, {, and } symbols.\n     *\n     * @return the range in the document that this variable encompasses in its\n     *         entirety\n     */\n    getRange() {\n        return this.range;\n    }\n    /**\n     * Returns the modifier character that has been set for\n     * specifying how this variable should be expanded and resolved.\n     * If this variable is ${variable:+value} then the modifier\n     * character is '+'. Will be the empty string if the variable is\n     * declared as ${variable:}. Otherwise, will be null if this\n     * variable will not use variable substitution at all (such as\n     * ${variable} or $variable).\n     *\n     * @return this variable's modifier character, or the empty\n     *         string if it does not have one, or null if this\n     *         variable will not use variable substitution\n     */\n    getModifier() {\n        return this.modifier;\n    }\n    getModifierRange() {\n        return this.modifierRange;\n    }\n    /**\n     * Returns the parameter that will be used for substitution if\n     * this variable uses modifiers to define how its value should be\n     * resolved. If this variable is ${variable:+value} then the\n     * substitution value will be 'value'. Will be the empty string\n     * if the variable is declared as ${variable:+} or some other\n     * variant where the only thing that follows the modifier\n     * character (excluding considerations of escape characters and\n     * so on) is the variable's closing bracket. May be null if this\n     * variable does not have a modifier character defined (such as\n     * ${variable} or $variable).\n     *\n     * @return this variable's substitution parameter, or the empty\n     *         string if it does not have one, or null if there is\n     *         not one defined\n     */\n    getSubstitutionParameter() {\n        return this.substitutionParameter;\n    }\n    getSubstitutionRange() {\n        return this.substitutionRange;\n    }\n    /**\n     * Returns whether this variable has been defined or not.\n     *\n     * @return true if this variable has been defined, false otherwise\n     */\n    isDefined() {\n        return this.defined;\n    }\n    isBuildVariable() {\n        return this.buildVariable === true;\n    }\n    isEnvironmentVariable() {\n        return this.buildVariable === false;\n    }\n}\nexports.Variable = Variable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst instruction_1 = require(\"../instruction\");\nclass User extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.User = User;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst comment_1 = require(\"./comment\");\nconst parserDirective_1 = require(\"./parserDirective\");\nconst instruction_1 = require(\"./instruction\");\nconst add_1 = require(\"./instructions/add\");\nconst arg_1 = require(\"./instructions/arg\");\nconst cmd_1 = require(\"./instructions/cmd\");\nconst copy_1 = require(\"./instructions/copy\");\nconst env_1 = require(\"./instructions/env\");\nconst entrypoint_1 = require(\"./instructions/entrypoint\");\nconst from_1 = require(\"./instructions/from\");\nconst healthcheck_1 = require(\"./instructions/healthcheck\");\nconst label_1 = require(\"./instructions/label\");\nconst onbuild_1 = require(\"./instructions/onbuild\");\nconst run_1 = require(\"./instructions/run\");\nconst shell_1 = require(\"./instructions/shell\");\nconst stopsignal_1 = require(\"./instructions/stopsignal\");\nconst workdir_1 = require(\"./instructions/workdir\");\nconst user_1 = require(\"./instructions/user\");\nconst volume_1 = require(\"./instructions/volume\");\nconst dockerfile_1 = require(\"./dockerfile\");\nclass Parser {\n    constructor() {\n        this.escapeChar = null;\n    }\n    static createInstruction(document, dockerfile, escapeChar, lineRange, instruction, instructionRange) {\n        switch (instruction.toUpperCase()) {\n            case \"ADD\":\n                return new add_1.Add(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ARG\":\n                return new arg_1.Arg(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"CMD\":\n                return new cmd_1.Cmd(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"COPY\":\n                return new copy_1.Copy(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ENTRYPOINT\":\n                return new entrypoint_1.Entrypoint(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ENV\":\n                return new env_1.Env(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"FROM\":\n                return new from_1.From(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"HEALTHCHECK\":\n                return new healthcheck_1.Healthcheck(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"LABEL\":\n                return new label_1.Label(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ONBUILD\":\n                return new onbuild_1.Onbuild(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"RUN\":\n                return new run_1.Run(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"SHELL\":\n                return new shell_1.Shell(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"STOPSIGNAL\":\n                return new stopsignal_1.Stopsignal(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"WORKDIR\":\n                return new workdir_1.Workdir(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"USER\":\n                return new user_1.User(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"VOLUME\":\n                return new volume_1.Volume(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n        }\n        return new instruction_1.Instruction(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getParserDirectives(document, buffer) {\n        // reset the escape directive in between runs\n        const directives = [];\n        this.escapeChar = '';\n        directiveCheck: for (let i = 0; i < buffer.length; i++) {\n            switch (buffer.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    break;\n                case '\\r':\n                case '\\n':\n                    // blank lines stop the parsing of directives immediately\n                    break directiveCheck;\n                case '#':\n                    let commentStart = i;\n                    let directiveStart = -1;\n                    let directiveEnd = -1;\n                    for (let j = i + 1; j < buffer.length; j++) {\n                        let char = buffer.charAt(j);\n                        switch (char) {\n                            case ' ':\n                            case '\\t':\n                                if (directiveStart !== -1 && directiveEnd === -1) {\n                                    directiveEnd = j;\n                                }\n                                break;\n                            case '\\r':\n                            case '\\n':\n                                break directiveCheck;\n                            case '=':\n                                let valueStart = -1;\n                                let valueEnd = -1;\n                                if (directiveEnd === -1) {\n                                    directiveEnd = j;\n                                }\n                                // assume the line ends with the file\n                                let lineEnd = buffer.length;\n                                directiveValue: for (let k = j + 1; k < buffer.length; k++) {\n                                    char = buffer.charAt(k);\n                                    switch (char) {\n                                        case '\\r':\n                                        case '\\n':\n                                            if (valueStart !== -1 && valueEnd === -1) {\n                                                valueEnd = k;\n                                            }\n                                            // line break found, reset\n                                            lineEnd = k;\n                                            break directiveValue;\n                                        case '\\t':\n                                        case ' ':\n                                            if (valueStart !== -1 && valueEnd === -1) {\n                                                valueEnd = k;\n                                            }\n                                            continue;\n                                        default:\n                                            if (valueStart === -1) {\n                                                valueStart = k;\n                                            }\n                                            break;\n                                    }\n                                }\n                                let lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(commentStart), document.positionAt(lineEnd));\n                                if (directiveStart === -1) {\n                                    // no directive, it's a regular comment\n                                    break directiveCheck;\n                                }\n                                if (valueStart === -1) {\n                                    // no non-whitespace characters found, highlight all the characters then\n                                    valueStart = j + 1;\n                                    valueEnd = lineEnd;\n                                }\n                                else if (valueEnd === -1) {\n                                    // reached EOF\n                                    valueEnd = buffer.length;\n                                }\n                                let nameRange = vscode_languageserver_types_1.Range.create(document.positionAt(directiveStart), document.positionAt(directiveEnd));\n                                let valueRange = vscode_languageserver_types_1.Range.create(document.positionAt(valueStart), document.positionAt(valueEnd));\n                                directives.push(new parserDirective_1.ParserDirective(document, lineRange, nameRange, valueRange));\n                                directiveStart = -1;\n                                if (buffer.charAt(valueEnd) === '\\r') {\n                                    // skip over the \\r\n                                    i = valueEnd + 1;\n                                }\n                                else {\n                                    i = valueEnd;\n                                }\n                                continue directiveCheck;\n                            default:\n                                if (directiveStart === -1) {\n                                    directiveStart = j;\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                default:\n                    break directiveCheck;\n            }\n        }\n        return directives;\n    }\n    parse(buffer) {\n        let document = vscode_languageserver_types_1.TextDocument.create(\"\", \"\", 0, buffer);\n        let dockerfile = new dockerfile_1.Dockerfile(document);\n        let directives = this.getParserDirectives(document, buffer);\n        let offset = 0;\n        this.escapeChar = '\\\\';\n        if (directives.length > 0) {\n            dockerfile.setDirectives(directives);\n            this.escapeChar = dockerfile.getEscapeCharacter();\n            // start parsing after the directives\n            offset = document.offsetAt(vscode_languageserver_types_1.Position.create(directives.length, 0));\n        }\n        lineCheck: for (let i = offset; i < buffer.length; i++) {\n            let char = buffer.charAt(i);\n            switch (char) {\n                case ' ':\n                case '\\t':\n                case '\\r':\n                case '\\n':\n                    break;\n                case '#':\n                    for (let j = i + 1; j < buffer.length; j++) {\n                        char = buffer.charAt(j);\n                        switch (char) {\n                            case '\\r':\n                                dockerfile.addComment(new comment_1.Comment(document, vscode_languageserver_types_1.Range.create(document.positionAt(i), document.positionAt(j))));\n                                // offset one more for \\r\\n\n                                i = j + 1;\n                                continue lineCheck;\n                            case '\\n':\n                                dockerfile.addComment(new comment_1.Comment(document, vscode_languageserver_types_1.Range.create(document.positionAt(i), document.positionAt(j))));\n                                i = j;\n                                continue lineCheck;\n                        }\n                    }\n                    // reached EOF\n                    let range = vscode_languageserver_types_1.Range.create(document.positionAt(i), document.positionAt(buffer.length));\n                    dockerfile.addComment(new comment_1.Comment(document, range));\n                    break lineCheck;\n                default:\n                    let instruction = char;\n                    let instructionStart = i;\n                    let instructionEnd = -1;\n                    let lineRange = null;\n                    let instructionRange = null;\n                    let escapedInstruction = false;\n                    instructionCheck: for (let j = i + 1; j < buffer.length; j++) {\n                        char = buffer.charAt(j);\n                        switch (char) {\n                            case this.escapeChar:\n                                escapedInstruction = true;\n                                char = buffer.charAt(j + 1);\n                                if (char === '\\r') {\n                                    // skip two for \\r\\n\n                                    j += 2;\n                                }\n                                else if (char === '\\n') {\n                                    j++;\n                                }\n                                else if (char === ' ' || char === '\\t') {\n                                    for (let k = j + 2; k < buffer.length; k++) {\n                                        switch (buffer.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                                break;\n                                            case '\\r':\n                                                // skip another for \\r\\n\n                                                j = k + 1;\n                                                continue instructionCheck;\n                                            case '\\n':\n                                                j = k;\n                                                continue instructionCheck;\n                                            default:\n                                                instructionEnd = j + 1;\n                                                instruction = instruction + this.escapeChar;\n                                                j = k - 2;\n                                                continue instructionCheck;\n                                        }\n                                    }\n                                    instructionEnd = j + 1;\n                                    instruction = instruction + this.escapeChar;\n                                    break instructionCheck;\n                                }\n                                else {\n                                    instructionEnd = j + 1;\n                                    instruction = instruction + this.escapeChar;\n                                }\n                                break;\n                            case ' ':\n                            case '\\t':\n                                if (escapedInstruction) {\n                                    // on an escaped newline, need to search for non-whitespace\n                                    escapeCheck: for (let k = j + 1; k < buffer.length; k++) {\n                                        switch (buffer.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                                break;\n                                            case '\\r':\n                                                // skip another for \\r\\n\n                                                j = k + 1;\n                                                continue instructionCheck;\n                                            case '\\n':\n                                                j = k;\n                                                continue instructionCheck;\n                                            default:\n                                                break escapeCheck;\n                                        }\n                                    }\n                                    escapedInstruction = false;\n                                }\n                                if (instructionEnd === -1) {\n                                    instructionEnd = j;\n                                }\n                                let escaped = false;\n                                argumentsCheck: for (let k = j + 1; k < buffer.length; k++) {\n                                    switch (buffer.charAt(k)) {\n                                        case '\\r':\n                                        case '\\n':\n                                            if (escaped) {\n                                                continue;\n                                            }\n                                            i = k;\n                                            lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(k));\n                                            instructionRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(instructionEnd));\n                                            dockerfile.addInstruction(Parser.createInstruction(document, dockerfile, this.escapeChar, lineRange, instruction, instructionRange));\n                                            continue lineCheck;\n                                        case this.escapeChar:\n                                            let next = buffer.charAt(k + 1);\n                                            if (next === '\\n') {\n                                                escaped = true;\n                                                k++;\n                                            }\n                                            else if (next === '\\r') {\n                                                escaped = true;\n                                                // skip two chars for \\r\\n\n                                                k = k + 2;\n                                            }\n                                            else if (next === ' ' || next === '\\t') {\n                                                escapeCheck: for (let l = k + 2; l < buffer.length; l++) {\n                                                    switch (buffer.charAt(l)) {\n                                                        case ' ':\n                                                        case '\\t':\n                                                            break;\n                                                        case '\\r':\n                                                            // skip another char for \\r\\n\n                                                            escaped = true;\n                                                            k = l + 1;\n                                                            break escapeCheck;\n                                                        case '\\n':\n                                                            escaped = true;\n                                                            k = l;\n                                                            break escapeCheck;\n                                                        default:\n                                                            k = l;\n                                                            break escapeCheck;\n                                                    }\n                                                }\n                                            }\n                                            continue;\n                                        case '#':\n                                            if (escaped) {\n                                                for (let l = k + 1; l < buffer.length; l++) {\n                                                    switch (buffer.charAt(l)) {\n                                                        case '\\r':\n                                                            dockerfile.addComment(new comment_1.Comment(document, vscode_languageserver_types_1.Range.create(document.positionAt(k), document.positionAt(l))));\n                                                            // offset one more for \\r\\n\n                                                            k = l + 1;\n                                                            continue argumentsCheck;\n                                                        case '\\n':\n                                                            let range = vscode_languageserver_types_1.Range.create(document.positionAt(k), document.positionAt(l));\n                                                            dockerfile.addComment(new comment_1.Comment(document, range));\n                                                            k = l;\n                                                            continue argumentsCheck;\n                                                    }\n                                                }\n                                                let range = vscode_languageserver_types_1.Range.create(document.positionAt(k), document.positionAt(buffer.length));\n                                                dockerfile.addComment(new comment_1.Comment(document, range));\n                                                break argumentsCheck;\n                                            }\n                                            break;\n                                        case ' ':\n                                        case '\\t':\n                                            break;\n                                        default:\n                                            if (escaped) {\n                                                escaped = false;\n                                            }\n                                            break;\n                                    }\n                                }\n                                // reached EOF\n                                lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(buffer.length));\n                                instructionRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(instructionEnd));\n                                dockerfile.addInstruction(Parser.createInstruction(document, dockerfile, this.escapeChar, lineRange, instruction, instructionRange));\n                                break lineCheck;\n                            case '\\r':\n                                if (instructionEnd === -1) {\n                                    instructionEnd = j;\n                                }\n                                // skip for \\r\\n\n                                j++;\n                            case '\\n':\n                                if (escapedInstruction) {\n                                    continue;\n                                }\n                                if (instructionEnd === -1) {\n                                    instructionEnd = j;\n                                }\n                                lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(instructionEnd));\n                                dockerfile.addInstruction(Parser.createInstruction(document, dockerfile, this.escapeChar, lineRange, instruction, lineRange));\n                                i = j;\n                                continue lineCheck;\n                            default:\n                                instructionEnd = j + 1;\n                                instruction = instruction + char;\n                                break;\n                        }\n                    }\n                    // reached EOF\n                    if (instructionEnd === -1) {\n                        instructionEnd = buffer.length;\n                    }\n                    lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(instructionStart), document.positionAt(instructionEnd));\n                    dockerfile.addInstruction(Parser.createInstruction(document, dockerfile, this.escapeChar, lineRange, instruction, lineRange));\n                    break lineCheck;\n            }\n        }\n        dockerfile.organizeComments();\n        return dockerfile;\n    }\n}\nexports.Parser = Parser;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst instruction_1 = require(\"../instruction\");\nclass Stopsignal extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Stopsignal = Stopsignal;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Line {\n    constructor(document, range) {\n        this.document = document;\n        this.range = range;\n    }\n    getRange() {\n        return this.range;\n    }\n    getTextContent() {\n        return this.document.getText().substring(this.document.offsetAt(this.range.start), this.document.offsetAt(this.range.end));\n    }\n    isAfter(line) {\n        return this.range.start.line > line.range.start.line;\n    }\n    isBefore(line) {\n        return this.range.start.line < line;\n    }\n}\nexports.Line = Line;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst util_1 = require(\"./util\");\nconst line_1 = require(\"./line\");\nconst argument_1 = require(\"./argument\");\nconst variable_1 = require(\"./variable\");\nconst main_1 = require(\"./main\");\nclass Instruction extends line_1.Line {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range);\n        this.dockerfile = dockerfile;\n        this.escapeChar = escapeChar;\n        this.instruction = instruction;\n        this.instructionRange = instructionRange;\n    }\n    toString() {\n        let value = this.getKeyword();\n        for (let arg of this.getRawArguments()) {\n            value += ' ';\n            value += arg.getValue();\n        }\n        return value;\n    }\n    getRangeContent(range) {\n        if (range === null) {\n            return null;\n        }\n        return this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n    }\n    getInstructionRange() {\n        return this.instructionRange;\n    }\n    getInstruction() {\n        return this.instruction;\n    }\n    getKeyword() {\n        return this.getInstruction().toUpperCase();\n    }\n    getArgumentsRange() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        return vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end);\n    }\n    getArgumentsRanges() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return [];\n        }\n        if (args[0].getRange().start.line === args[args.length - 1].getRange().end.line) {\n            return [vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end)];\n        }\n        let ranges = [];\n        let end = -1;\n        let startPosition = args[0].getRange().start;\n        let range = this.getInstructionRange();\n        let extra = this.document.offsetAt(startPosition) - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra, this.document.offsetAt(args[args.length - 1].getRange().end) - this.document.offsetAt(range.start));\n        let offset = this.document.offsetAt(range.start) + extra;\n        let start = false;\n        let comment = false;\n        for (let i = 0; i < fullArgs.length; i++) {\n            let char = fullArgs.charAt(i);\n            if (char === this.escapeChar) {\n                let next = fullArgs.charAt(i + 1);\n                if (next === ' ' || next === '\\t') {\n                    whitespaceCheck: for (let j = i + 2; j < fullArgs.length; j++) {\n                        switch (fullArgs.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                if (startPosition !== null) {\n                                    ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                                }\n                                startPosition = null;\n                                start = true;\n                                comment = false;\n                                i = j;\n                                break whitespaceCheck;\n                            default:\n                                break whitespaceCheck;\n                        }\n                    }\n                }\n                else if (next === '\\r') {\n                    if (startPosition !== null) {\n                        ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                        startPosition = null;\n                    }\n                    start = true;\n                    comment = false;\n                    i += 2;\n                }\n                else if (next === '\\n') {\n                    if (startPosition !== null) {\n                        ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                    }\n                    startPosition = null;\n                    start = true;\n                    comment = false;\n                    i++;\n                }\n                else {\n                    i++;\n                }\n            }\n            else if (util_1.Util.isNewline(char)) {\n                if (comment) {\n                    startPosition = null;\n                    start = true;\n                    comment = false;\n                }\n            }\n            else {\n                if (!comment) {\n                    if (startPosition === null) {\n                        if (char === '#') {\n                            comment = true;\n                            continue;\n                        }\n                        let position = this.document.positionAt(offset + i);\n                        if (position.character !== 0) {\n                            startPosition = vscode_languageserver_types_1.Position.create(position.line, 0);\n                        }\n                    }\n                    end = i;\n                }\n            }\n        }\n        if (startPosition === null) {\n            // should only happen if the last argument is on its own line with\n            // no leading whitespace\n            ranges.push(vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + end), this.document.positionAt(offset + end + 1)));\n        }\n        else {\n            ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n        }\n        return ranges;\n    }\n    getRawArgumentsContent() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        return this.getRangeContent(vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end));\n    }\n    getArgumentsContent() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        let content = \"\";\n        let ranges = this.getArgumentsRanges();\n        let documentText = this.document.getText();\n        for (let range of ranges) {\n            content += documentText.substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n        }\n        return content;\n    }\n    getArguments() {\n        return this.getRawArguments();\n    }\n    getRawArguments() {\n        let args = [];\n        let range = this.getInstructionRange();\n        let extra = this.document.offsetAt(range.end) - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra);\n        let offset = this.document.offsetAt(range.start) + extra;\n        let start = false;\n        let comment = false;\n        let found = -1;\n        // determines whether the parser has found a space or tab\n        // whitespace character that's a part of an escaped newline sequence\n        let escapedWhitespaceDetected = false;\n        // determines if the parser is currently in an escaped newline sequence\n        let escaping = false;\n        let escapeMarker = -1;\n        let escapedArg = \"\";\n        for (let i = 0; i < fullArgs.length; i++) {\n            let char = fullArgs.charAt(i);\n            if (util_1.Util.isWhitespace(char)) {\n                if (escaping) {\n                    escapedWhitespaceDetected = true;\n                    if (util_1.Util.isNewline(char)) {\n                        // reached a newline, any previously\n                        // detected whitespace should be ignored\n                        escapedWhitespaceDetected = false;\n                        if (comment) {\n                            // reached a newline, no longer in a comment\n                            comment = false;\n                            start = true;\n                        }\n                    }\n                    continue;\n                }\n                else if (found !== -1) {\n                    if (escapeMarker === -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + i))));\n                    }\n                    else {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                    }\n                    escapeMarker = -1;\n                    escapedArg = \"\";\n                    found = -1;\n                }\n            }\n            else if (char === this.escapeChar) {\n                let next = fullArgs.charAt(i + 1);\n                if (next === ' ' || next === '\\t') {\n                    whitespaceCheck: for (let j = i + 2; j < fullArgs.length; j++) {\n                        let newlineCheck = fullArgs.charAt(j);\n                        switch (newlineCheck) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                comment = false;\n                                escaping = true;\n                                start = true;\n                                if (found !== -1) {\n                                    escapeMarker = i;\n                                }\n                                i = j;\n                                break whitespaceCheck;\n                            default:\n                                escapeMarker = i;\n                                if (found === -1) {\n                                    i = j - 1;\n                                }\n                                break whitespaceCheck;\n                        }\n                    }\n                }\n                else if (next === '\\r') {\n                    comment = false;\n                    escaping = true;\n                    start = true;\n                    if (found !== -1 && escapeMarker === -1) {\n                        escapeMarker = i;\n                    }\n                    i += 2;\n                }\n                else if (next === '\\n') {\n                    comment = false;\n                    escaping = true;\n                    start = true;\n                    if (found !== -1 && escapeMarker === -1) {\n                        escapeMarker = i;\n                    }\n                    i++;\n                }\n                else {\n                    if (escapedWhitespaceDetected && escapeMarker !== -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                        escapedArg = \"\";\n                        found = -1;\n                    }\n                    escapeMarker = -1;\n                    escapedWhitespaceDetected = false;\n                    escaping = false;\n                    if (next === '$') {\n                        escapedArg = escapedArg + char + next;\n                    }\n                    else if (next === '') {\n                        // reached EOF, stop processing\n                        break;\n                    }\n                    else {\n                        escapedArg = escapedArg + next;\n                    }\n                    if (found === -1) {\n                        found = i;\n                    }\n                    i++;\n                }\n            }\n            else if (!comment) {\n                if (start && char === '#') {\n                    comment = true;\n                }\n                else {\n                    if (escapedWhitespaceDetected && escapeMarker !== -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                        escapedArg = \"\";\n                        found = -1;\n                    }\n                    escapedWhitespaceDetected = false;\n                    escaping = false;\n                    escapeMarker = -1;\n                    escapedArg = escapedArg + char;\n                    if (found === -1) {\n                        found = i;\n                    }\n                }\n                // non-whitespace character detected, reset\n                start = false;\n            }\n        }\n        if (found !== -1) {\n            if (escapeMarker === -1) {\n                args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + fullArgs.length))));\n            }\n            else {\n                args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n            }\n        }\n        return args;\n    }\n    getExpandedArguments() {\n        let args = this.getArguments();\n        for (let i = 0; i < args.length; i++) {\n            const argRange = args[i].getRange();\n            let offset = this.document.offsetAt(argRange.start);\n            const variables = this.parseVariables(offset, args[i].getValue());\n            const swaps = [];\n            let requiresExpansion = false;\n            for (let variable of variables) {\n                const value = this.dockerfile.resolveVariable(variable.getName(), variable.getNameRange().start.line);\n                swaps.push(value);\n                requiresExpansion = requiresExpansion || value !== undefined;\n            }\n            if (requiresExpansion) {\n                let expanded = \"\";\n                for (let j = 0; j < swaps.length; j++) {\n                    const variableRange = variables[j].getRange();\n                    const start = this.document.offsetAt(variableRange.start);\n                    const end = this.document.offsetAt(variableRange.end);\n                    if (swaps[j]) {\n                        // replace variable with its resolved value\n                        expanded += this.document.getText().substring(offset, start);\n                        expanded += swaps[j];\n                        offset = end;\n                    }\n                    else {\n                        expanded += this.document.getText().substring(offset, end);\n                        offset = end;\n                    }\n                }\n                const argEnd = this.document.offsetAt(argRange.end);\n                if (argEnd !== offset) {\n                    // if the variable's range doesn't match the argument,\n                    // append the remaining text\n                    expanded += this.document.getText().substring(offset, argEnd);\n                }\n                args[i] = new argument_1.Argument(expanded, argRange);\n            }\n        }\n        return args;\n    }\n    getVariables() {\n        const variables = [];\n        const args = this.getRawArguments();\n        for (const arg of args) {\n            let range = arg.getRange();\n            let rawValue = this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n            const parsedVariables = this.parseVariables(this.document.offsetAt(arg.getRange().start), rawValue);\n            for (const parsedVariable of parsedVariables) {\n                variables.push(parsedVariable);\n            }\n        }\n        return variables;\n    }\n    parseVariables(offset, arg) {\n        let variables = [];\n        variableLoop: for (let i = 0; i < arg.length; i++) {\n            switch (arg.charAt(i)) {\n                case this.escapeChar:\n                    if (arg.charAt(i + 1) === '$') {\n                        i++;\n                    }\n                    break;\n                case '$':\n                    if (arg.charAt(i + 1) === '{') {\n                        let escapedString = \"${\";\n                        let escapedName = \"\";\n                        let nameEnd = -1;\n                        let escapedSubstitutionParameter = \"\";\n                        let substitutionStart = -1;\n                        let substitutionEnd = -1;\n                        let modifierRead = -1;\n                        nameLoop: for (let j = i + 2; j < arg.length; j++) {\n                            let char = arg.charAt(j);\n                            switch (char) {\n                                case this.escapeChar:\n                                    for (let k = j + 1; k < arg.length; k++) {\n                                        switch (arg.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                            case '\\r':\n                                                // ignore whitespace\n                                                continue;\n                                            case '\\n':\n                                                // escape this newline\n                                                j = k;\n                                                continue nameLoop;\n                                        }\n                                    }\n                                    break;\n                                case '}':\n                                    escapedString += '}';\n                                    let modifier = null;\n                                    let modifierRange = null;\n                                    let substitutionParameter = modifierRead !== -1 ? escapedSubstitutionParameter : null;\n                                    let substitutionRange = null;\n                                    if (nameEnd === -1) {\n                                        nameEnd = j;\n                                    }\n                                    else if (nameEnd + 1 === j) {\n                                        modifier = \"\";\n                                        modifierRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + nameEnd + 1), this.document.positionAt(offset + nameEnd + 1));\n                                    }\n                                    else {\n                                        if (substitutionStart === -1) {\n                                            // no substitution parameter found,\n                                            // but a modifier character existed,\n                                            // just offset the range by 1 from\n                                            // the modifier character\n                                            substitutionStart = modifierRead + 1;\n                                            substitutionEnd = modifierRead + 1;\n                                        }\n                                        else {\n                                            // offset one more from the last\n                                            // character found\n                                            substitutionEnd = substitutionEnd + 1;\n                                        }\n                                        modifier = arg.substring(modifierRead, modifierRead + 1);\n                                        modifierRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + modifierRead), this.document.positionAt(offset + modifierRead + 1));\n                                        substitutionRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + substitutionStart), this.document.positionAt(offset + substitutionEnd));\n                                    }\n                                    let start = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 2), this.document.positionAt(offset + nameEnd)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + j + 1)), modifier, modifierRange, substitutionParameter, substitutionRange, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), escapedString));\n                                    i = j;\n                                    continue variableLoop;\n                                case ':':\n                                    if (nameEnd === -1) {\n                                        nameEnd = j;\n                                    }\n                                    else if (modifierRead !== -1) {\n                                        if (substitutionStart === -1) {\n                                            substitutionStart = j;\n                                            substitutionEnd = j;\n                                        }\n                                        else {\n                                            substitutionEnd = j;\n                                        }\n                                        escapedSubstitutionParameter += ':';\n                                    }\n                                    else {\n                                        modifierRead = j;\n                                    }\n                                    escapedString += ':';\n                                    break;\n                                case '\\n':\n                                case '\\r':\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                default:\n                                    if (nameEnd === -1) {\n                                        escapedName += char;\n                                    }\n                                    else if (modifierRead !== -1) {\n                                        if (substitutionStart === -1) {\n                                            substitutionStart = j;\n                                            substitutionEnd = j;\n                                        }\n                                        else {\n                                            substitutionEnd = j;\n                                        }\n                                        escapedSubstitutionParameter += char;\n                                    }\n                                    else {\n                                        modifierRead = j;\n                                    }\n                                    escapedString += char;\n                                    break;\n                            }\n                        }\n                        // no } found, not a valid variable, stop processing\n                        break variableLoop;\n                    }\n                    else if (util_1.Util.isWhitespace(arg.charAt(i + 1)) || i === arg.length - 1) {\n                        // $ followed by whitespace or EOF, ignore this variable\n                        continue;\n                    }\n                    else {\n                        let escapedName = \"\";\n                        nameLoop: for (let j = i + 1; j < arg.length; j++) {\n                            let char = arg.charAt(j);\n                            switch (char) {\n                                case '\\r':\n                                case '\\n':\n                                case ' ':\n                                case '\\t':\n                                    continue;\n                                case '$':\n                                case '\\'':\n                                case '\"':\n                                    let varStart = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(varStart, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, varStart.line) !== undefined, this.isBuildVariable(escapedName, varStart.line), '$' + escapedName));\n                                    i = j - 1;\n                                    continue variableLoop;\n                                case this.escapeChar:\n                                    for (let k = j + 1; k < arg.length; k++) {\n                                        switch (arg.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                            case '\\r':\n                                                // ignore whitespace\n                                                continue;\n                                            case '\\n':\n                                                // escape this newline\n                                                j = k;\n                                                continue nameLoop;\n                                        }\n                                    }\n                                    // reached EOF after an escape character\n                                    let start = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), '$' + escapedName));\n                                    break variableLoop;\n                            }\n                            if (char.match(/^[a-z0-9_]+$/i) === null) {\n                                let varStart = this.document.positionAt(offset + i);\n                                variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(varStart, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, varStart.line) !== undefined, this.isBuildVariable(escapedName, varStart.line), '$' + escapedName));\n                                i = j - 1;\n                                continue variableLoop;\n                            }\n                            escapedName += char;\n                        }\n                        let start = this.document.positionAt(offset + i);\n                        variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + arg.length)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + arg.length)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), '$' + escapedName));\n                    }\n                    break variableLoop;\n            }\n        }\n        return variables;\n    }\n    isBuildVariable(variable, line) {\n        if (this.getKeyword() === main_1.Keyword.FROM) {\n            for (const initialArg of this.dockerfile.getInitialARGs()) {\n                const arg = initialArg;\n                const property = arg.getProperty();\n                if (property && variable === property.getName()) {\n                    return true;\n                }\n            }\n            return undefined;\n        }\n        let image = this.dockerfile.getContainingImage(vscode_languageserver_types_1.Position.create(line, 0));\n        let envs = image.getENVs();\n        for (let i = envs.length - 1; i >= 0; i--) {\n            if (envs[i].isBefore(line)) {\n                for (let property of envs[i].getProperties()) {\n                    if (property.getName() === variable) {\n                        return false;\n                    }\n                }\n            }\n        }\n        let args = image.getARGs();\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (args[i].isBefore(line)) {\n                let property = args[i].getProperty();\n                if (property && property.getName() === variable) {\n                    return true;\n                }\n            }\n        }\n        return undefined;\n    }\n}\nexports.Instruction = Instruction;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst util_1 = require(\"./util\");\nclass Property {\n    constructor(document, escapeChar, arg, arg2) {\n        this.valueRange = null;\n        this.value = null;\n        this.document = document;\n        this.escapeChar = escapeChar;\n        this.nameRange = Property.getNameRange(document, arg);\n        let value = document.getText().substring(document.offsetAt(this.nameRange.start), document.offsetAt(this.nameRange.end));\n        this.name = Property.getValue(value, escapeChar);\n        if (arg2) {\n            this.valueRange = arg2.getRange();\n            value = document.getText().substring(document.offsetAt(this.valueRange.start), document.offsetAt(this.valueRange.end));\n            this.value = Property.getValue(value, escapeChar);\n            this.range = vscode_languageserver_types_1.Range.create(this.nameRange.start, this.valueRange.end);\n        }\n        else {\n            let argRange = arg.getRange();\n            if (this.nameRange.start.line === argRange.start.line\n                && this.nameRange.start.character === argRange.start.character\n                && this.nameRange.end.line === argRange.end.line\n                && this.nameRange.end.character === argRange.end.character) {\n            }\n            else {\n                this.valueRange = Property.getValueRange(document, arg);\n                value = document.getText().substring(document.offsetAt(this.valueRange.start), document.offsetAt(this.valueRange.end));\n                this.value = Property.getValue(value, escapeChar);\n            }\n            this.range = argRange;\n        }\n    }\n    getRange() {\n        return this.range;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValue() {\n        return this.value;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n    /**\n     * Returns the value of this property including any enclosing\n     * single or double quotes and relevant escape characters.\n     * Escaped newlines and its associated contiguous whitespace\n     * characters however will not be returned as they are deemed to\n     * be uninteresting to clients trying to return a Dockerfile.\n     *\n     * @return the unescaped value of this property or null if this\n     *         property has no associated value\n     */\n    getUnescapedValue() {\n        if (this.valueRange === null) {\n            return null;\n        }\n        let escaped = false;\n        let rawValue = \"\";\n        let value = this.document.getText().substring(this.document.offsetAt(this.valueRange.start), this.document.offsetAt(this.valueRange.end));\n        rawLoop: for (let i = 0; i < value.length; i++) {\n            let char = value.charAt(i);\n            switch (char) {\n                case this.escapeChar:\n                    for (let j = i + 1; j < value.length; j++) {\n                        switch (value.charAt(j)) {\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                escaped = true;\n                                i = j;\n                                continue rawLoop;\n                            case ' ':\n                            case '\\t':\n                                break;\n                            default:\n                                rawValue = rawValue + char;\n                                continue rawLoop;\n                        }\n                    }\n                    // this happens if there's only whitespace after the escape character\n                    rawValue = rawValue + char;\n                    break;\n                case '\\r':\n                case '\\n':\n                    break;\n                case ' ':\n                case '\\t':\n                    if (!escaped) {\n                        rawValue = rawValue + char;\n                    }\n                    break;\n                case '#':\n                    if (escaped) {\n                        for (let j = i + 1; j < value.length; j++) {\n                            switch (value.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    continue rawLoop;\n                            }\n                        }\n                    }\n                    else {\n                        rawValue = rawValue + char;\n                    }\n                    break;\n                default:\n                    rawValue = rawValue + char;\n                    escaped = false;\n                    break;\n            }\n        }\n        return rawValue;\n    }\n    static getNameRange(document, arg) {\n        let value = arg.getValue();\n        let index = value.indexOf('=');\n        if (index !== -1) {\n            let initial = value.charAt(0);\n            let before = value.charAt(index - 1);\n            // check if content before the equals sign are in quotes\n            // \"var\"=value\n            // 'var'=value\n            // otherwise, just assume it's a standard definition\n            // var=value\n            if ((initial === '\"' && before === '\"') || (initial === '\\'' && before === '\\'') || (initial !== '\"' && initial !== '\\'')) {\n                return vscode_languageserver_types_1.Range.create(arg.getRange().start, document.positionAt(document.offsetAt(arg.getRange().start) + index));\n            }\n        }\n        // no '=' found, just defined the property's name\n        return arg.getRange();\n    }\n    static getValueRange(document, arg) {\n        return vscode_languageserver_types_1.Range.create(document.positionAt(document.offsetAt(arg.getRange().start) + arg.getValue().indexOf('=') + 1), document.positionAt(document.offsetAt(arg.getRange().end)));\n    }\n    /**\n     * Returns the actual value of this key-value pair. The value will\n     * have its escape characters removed if applicable. If the value\n     * spans multiple lines and there are comments nested within the\n     * lines, they too will be removed.\n     *\n     * @return the value that this key-value pair will actually be, may\n     *         be null if no value is defined, may be the empty string\n     *         if the value only consists of whitespace\n     */\n    static getValue(value, escapeChar) {\n        let escaped = false;\n        const skip = util_1.Util.findLeadingNonWhitespace(value, escapeChar);\n        if (skip !== 0 && value.charAt(skip) === '#') {\n            // need to skip over comments\n            escaped = true;\n        }\n        value = value.substring(skip);\n        let first = value.charAt(0);\n        let last = value.charAt(value.length - 1);\n        let literal = first === '\\'' || first === '\"';\n        let inSingle = (first === '\\'' && last === '\\'');\n        let inDouble = false;\n        if (first === '\"') {\n            for (let i = 1; i < value.length; i++) {\n                if (value.charAt(i) === escapeChar) {\n                    i++;\n                }\n                else if (value.charAt(i) === '\"' && i === value.length - 1) {\n                    inDouble = true;\n                }\n            }\n        }\n        if (inSingle || inDouble) {\n            value = value.substring(1, value.length - 1);\n        }\n        let commentCheck = -1;\n        let escapedValue = \"\";\n        let start = 0;\n        parseValue: for (let i = 0; i < value.length; i++) {\n            let char = value.charAt(i);\n            switch (char) {\n                case escapeChar:\n                    if (i + 1 === value.length) {\n                        escapedValue = escapedValue + escapeChar;\n                        break parseValue;\n                    }\n                    char = value.charAt(i + 1);\n                    if (char === ' ' || char === '\\t') {\n                        whitespaceCheck: for (let j = i + 2; j < value.length; j++) {\n                            let char2 = value.charAt(j);\n                            switch (char2) {\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    escaped = true;\n                                    i = j;\n                                    continue parseValue;\n                                default:\n                                    if (!inDouble && !inSingle && !literal) {\n                                        if (char2 === escapeChar) {\n                                            // add the escaped character\n                                            escapedValue = escapedValue + char;\n                                            // now start parsing from the next escape character\n                                            i = i + 1;\n                                        }\n                                        else {\n                                            // the expectation is that this j = i + 2 here\n                                            escapedValue = escapedValue + char + char2;\n                                            i = j;\n                                        }\n                                        continue parseValue;\n                                    }\n                                    break whitespaceCheck;\n                            }\n                        }\n                    }\n                    if (inDouble) {\n                        if (char === '\\r') {\n                            escaped = true;\n                            i = i + 2;\n                        }\n                        else if (char === '\\n') {\n                            escaped = true;\n                            i++;\n                        }\n                        else if (char !== '\"') {\n                            if (char === escapeChar) {\n                                i++;\n                            }\n                            escapedValue = escapedValue + escapeChar;\n                        }\n                        continue parseValue;\n                    }\n                    else if (inSingle || literal) {\n                        if (char === '\\r') {\n                            escaped = true;\n                            i = i + 2;\n                        }\n                        else if (char === '\\n') {\n                            escaped = true;\n                            i++;\n                        }\n                        else {\n                            escapedValue = escapedValue + escapeChar;\n                        }\n                        continue parseValue;\n                    }\n                    else if (char === escapeChar) {\n                        // double escape, append one and move on\n                        escapedValue = escapedValue + escapeChar;\n                        i++;\n                    }\n                    else if (char === '\\r') {\n                        escaped = true;\n                        // offset one more for \\r\\n\n                        i = i + 2;\n                    }\n                    else if (char === '\\n') {\n                        escaped = true;\n                        i++;\n                        start = i;\n                    }\n                    else {\n                        // any other escapes are simply ignored\n                        escapedValue = escapedValue + char;\n                        i++;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    if (escaped && commentCheck === -1) {\n                        commentCheck = i;\n                    }\n                    escapedValue = escapedValue + char;\n                    break;\n                case '\\r':\n                    i++;\n                case '\\n':\n                    if (escaped && commentCheck !== -1) {\n                        // rollback and remove the whitespace that was previously appended\n                        escapedValue = escapedValue.substring(0, escapedValue.length - (i - commentCheck - 1));\n                        commentCheck = -1;\n                    }\n                    break;\n                case '#':\n                    // a newline was escaped and now there's a comment\n                    if (escaped) {\n                        if (commentCheck !== -1) {\n                            // rollback and remove the whitespace that was previously appended\n                            escapedValue = escapedValue.substring(0, escapedValue.length - (i - commentCheck));\n                            commentCheck = -1;\n                        }\n                        newlineCheck: for (let j = i + 1; j < value.length; j++) {\n                            switch (value.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    break newlineCheck;\n                            }\n                        }\n                        continue parseValue;\n                    }\n                default:\n                    if (escaped) {\n                        escaped = false;\n                        commentCheck = -1;\n                    }\n                    escapedValue = escapedValue + char;\n                    break;\n            }\n        }\n        return escapedValue;\n    }\n}\nexports.Property = Property;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst modifiableInstruction_1 = require(\"../modifiableInstruction\");\nclass From extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n    getImage() {\n        return this.getRangeContent(this.getImageRange());\n    }\n    /**\n     * Returns the name of the image that will be used as the base image.\n     *\n     * @return the base image's name, or null if unspecified\n     */\n    getImageName() {\n        return this.getRangeContent(this.getImageNameRange());\n    }\n    /**\n     * Returns the range that covers the name of the image used by\n     * this instruction.\n     *\n     * @return the range of the name of this instruction's argument,\n     *         or null if no image has been specified\n     */\n    getImageNameRange() {\n        let range = this.getImageRange();\n        if (range) {\n            let registryRange = this.getRegistryRange();\n            if (registryRange) {\n                range.start = this.document.positionAt(this.document.offsetAt(registryRange.end) + 1);\n            }\n            let tagRange = this.getImageTagRange();\n            let digestRange = this.getImageDigestRange();\n            if (tagRange === null) {\n                if (digestRange !== null) {\n                    range.end = this.document.positionAt(this.document.offsetAt(digestRange.start) - 1);\n                }\n            }\n            else {\n                range.end = this.document.positionAt(this.document.offsetAt(tagRange.start) - 1);\n            }\n            return range;\n        }\n        return null;\n    }\n    /**\n     * Returns the range that covers the image argument of this\n     * instruction. This includes the tag or digest of the image if\n     * it has been specified by the instruction.\n     *\n     * @return the range of the image argument, or null if no image\n     *         has been specified\n     */\n    getImageRange() {\n        let args = this.getArguments();\n        return args.length !== 0 ? args[0].getRange() : null;\n    }\n    getImageTag() {\n        return this.getRangeContent(this.getImageTagRange());\n    }\n    /**\n     * Returns the range in the document that the tag of the base\n     * image encompasses.\n     *\n     * @return the base image's tag's range in the document, or null\n     *         if no tag has been specified\n     */\n    getImageTagRange() {\n        const range = this.getImageRange();\n        if (range) {\n            if (this.getImageDigestRange() === null) {\n                let content = this.getRangeContent(range);\n                let index = this.lastIndexOf(this.document.offsetAt(range.start), content, ':');\n                // the colon might be for a private registry's port and not a tag\n                if (index > content.indexOf('/')) {\n                    return vscode_languageserver_types_1.Range.create(range.start.line, range.start.character + index + 1, range.end.line, range.end.character);\n                }\n            }\n        }\n        return null;\n    }\n    getImageDigest() {\n        return this.getRangeContent(this.getImageDigestRange());\n    }\n    /**\n     * Returns the range in the document that the digest of the base\n     * image encompasses.\n     *\n     * @return the base image's digest's range in the document, or null\n     *         if no digest has been specified\n     */\n    getImageDigestRange() {\n        let range = this.getImageRange();\n        if (range) {\n            let content = this.getRangeContent(range);\n            let index = this.lastIndexOf(this.document.offsetAt(range.start), content, '@');\n            if (index !== -1) {\n                return vscode_languageserver_types_1.Range.create(range.start.line, range.start.character + index + 1, range.end.line, range.end.character);\n            }\n        }\n        return null;\n    }\n    indexOf(documentOffset, content, searchString) {\n        let index = content.indexOf(searchString);\n        const variables = this.getVariables();\n        for (let i = 0; i < variables.length; i++) {\n            const position = documentOffset + index;\n            const variableRange = variables[i].getRange();\n            if (this.document.offsetAt(variableRange.start) < position && position < this.document.offsetAt(variableRange.end)) {\n                const offset = this.document.offsetAt(variableRange.end) - documentOffset;\n                const substring = content.substring(offset);\n                const subIndex = substring.indexOf(searchString);\n                if (subIndex === -1) {\n                    return -1;\n                }\n                index = subIndex + offset;\n                i = -1;\n                continue;\n            }\n        }\n        return index;\n    }\n    lastIndexOf(documentOffset, content, searchString) {\n        let index = content.lastIndexOf(searchString);\n        const variables = this.getVariables();\n        for (let i = 0; i < variables.length; i++) {\n            const position = documentOffset + index;\n            const variableRange = variables[i].getRange();\n            if (this.document.offsetAt(variableRange.start) < position && position < this.document.offsetAt(variableRange.end)) {\n                index = content.substring(0, index).lastIndexOf(searchString);\n                if (index === -1) {\n                    return -1;\n                }\n                i = -1;\n                continue;\n            }\n        }\n        return index;\n    }\n    getRegistry() {\n        return this.getRangeContent(this.getRegistryRange());\n    }\n    getRegistryRange() {\n        const range = this.getImageRange();\n        if (range) {\n            const tagRange = this.getImageTagRange();\n            const digestRange = this.getImageDigestRange();\n            if (tagRange === null) {\n                if (digestRange !== null) {\n                    range.end = this.document.positionAt(this.document.offsetAt(digestRange.start) - 1);\n                }\n            }\n            else {\n                range.end = this.document.positionAt(this.document.offsetAt(tagRange.start) - 1);\n            }\n            const content = this.getRangeContent(range);\n            const rangeStart = this.document.offsetAt(range.start);\n            const portIndex = this.indexOf(rangeStart, content, ':');\n            const dotIndex = this.indexOf(rangeStart, content, '.');\n            const startingSlashIndex = this.indexOf(rangeStart, content, '/');\n            // hostname detected\n            if (portIndex !== -1 || dotIndex !== -1) {\n                return vscode_languageserver_types_1.Range.create(range.start, this.document.positionAt(rangeStart + startingSlashIndex));\n            }\n            const registry = content.substring(0, startingSlashIndex);\n            // localhost registry detected\n            if (registry === 'localhost') {\n                return vscode_languageserver_types_1.Range.create(range.start, this.document.positionAt(rangeStart + startingSlashIndex));\n            }\n        }\n        return null;\n    }\n    getBuildStage() {\n        let range = this.getBuildStageRange();\n        return range === null ? null : this.getRangeContent(range);\n    }\n    getBuildStageRange() {\n        let args = this.getArguments();\n        if (args.length > 2 && args[1].getValue().toUpperCase() === \"AS\") {\n            return args[2].getRange();\n        }\n        return null;\n    }\n    getPlatformFlag() {\n        let flags = super.getFlags();\n        return flags.length === 1 && flags[0].getName() === \"platform\" ? flags[0] : null;\n    }\n}\nexports.From = From;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar argument_1 = require(\"./argument\");\nexports.Argument = argument_1.Argument;\nvar jsonArgument_1 = require(\"./jsonArgument\");\nexports.JSONArgument = jsonArgument_1.JSONArgument;\nconst comment_1 = require(\"./comment\");\nexports.Comment = comment_1.Comment;\nconst parser_1 = require(\"./parser\");\nvar flag_1 = require(\"./flag\");\nexports.Flag = flag_1.Flag;\nconst instruction_1 = require(\"./instruction\");\nexports.Instruction = instruction_1.Instruction;\nvar line_1 = require(\"./line\");\nexports.Line = line_1.Line;\nconst parserDirective_1 = require(\"./parserDirective\");\nexports.ParserDirective = parserDirective_1.ParserDirective;\nvar property_1 = require(\"./property\");\nexports.Property = property_1.Property;\nvar variable_1 = require(\"./variable\");\nexports.Variable = variable_1.Variable;\nvar add_1 = require(\"./instructions/add\");\nexports.Add = add_1.Add;\nconst arg_1 = require(\"./instructions/arg\");\nexports.Arg = arg_1.Arg;\nconst cmd_1 = require(\"./instructions/cmd\");\nexports.Cmd = cmd_1.Cmd;\nconst copy_1 = require(\"./instructions/copy\");\nexports.Copy = copy_1.Copy;\nconst entrypoint_1 = require(\"./instructions/entrypoint\");\nexports.Entrypoint = entrypoint_1.Entrypoint;\nconst env_1 = require(\"./instructions/env\");\nexports.Env = env_1.Env;\nconst from_1 = require(\"./instructions/from\");\nexports.From = from_1.From;\nconst healthcheck_1 = require(\"./instructions/healthcheck\");\nexports.Healthcheck = healthcheck_1.Healthcheck;\nvar jsonInstruction_1 = require(\"./jsonInstruction\");\nexports.JSONInstruction = jsonInstruction_1.JSONInstruction;\nvar label_1 = require(\"./instructions/label\");\nexports.Label = label_1.Label;\nvar modifiableInstruction_1 = require(\"./modifiableInstruction\");\nexports.ModifiableInstruction = modifiableInstruction_1.ModifiableInstruction;\nvar onbuild_1 = require(\"./instructions/onbuild\");\nexports.Onbuild = onbuild_1.Onbuild;\nvar propertyInstruction_1 = require(\"./propertyInstruction\");\nexports.PropertyInstruction = propertyInstruction_1.PropertyInstruction;\nvar shell_1 = require(\"./instructions/shell\");\nexports.Shell = shell_1.Shell;\nvar stopsignal_1 = require(\"./instructions/stopsignal\");\nexports.Stopsignal = stopsignal_1.Stopsignal;\nvar user_1 = require(\"./instructions/user\");\nexports.User = user_1.User;\nvar volume_1 = require(\"./instructions/volume\");\nexports.Volume = volume_1.Volume;\nvar workdir_1 = require(\"./instructions/workdir\");\nexports.Workdir = workdir_1.Workdir;\nvar Keyword;\n(function (Keyword) {\n    Keyword[\"ADD\"] = \"ADD\";\n    Keyword[\"ARG\"] = \"ARG\";\n    Keyword[\"CMD\"] = \"CMD\";\n    Keyword[\"COPY\"] = \"COPY\";\n    Keyword[\"ENTRYPOINT\"] = \"ENTRYPOINT\";\n    Keyword[\"ENV\"] = \"ENV\";\n    Keyword[\"EXPOSE\"] = \"EXPOSE\";\n    Keyword[\"FROM\"] = \"FROM\";\n    Keyword[\"HEALTHCHECK\"] = \"HEALTHCHECK\";\n    Keyword[\"LABEL\"] = \"LABEL\";\n    Keyword[\"MAINTAINER\"] = \"MAINTAINER\";\n    Keyword[\"ONBUILD\"] = \"ONBUILD\";\n    Keyword[\"RUN\"] = \"RUN\";\n    Keyword[\"SHELL\"] = \"SHELL\";\n    Keyword[\"STOPSIGNAL\"] = \"STOPSIGNAL\";\n    Keyword[\"USER\"] = \"USER\";\n    Keyword[\"VOLUME\"] = \"VOLUME\";\n    Keyword[\"WORKDIR\"] = \"WORKDIR\";\n})(Keyword = exports.Keyword || (exports.Keyword = {}));\nvar Directive;\n(function (Directive) {\n    Directive[\"escape\"] = \"escape\";\n    Directive[\"syntax\"] = \"syntax\";\n})(Directive = exports.Directive || (exports.Directive = {}));\nexports.DefaultVariables = [\n    \"FTP_PROXY\", \"ftp_proxy\",\n    \"HTTP_PROXY\", \"http_proxy\",\n    \"HTTPS_PROXY\", \"https_proxy\",\n    \"NO_PROXY\", \"no_proxy\"\n];\nvar DockerfileParser;\n(function (DockerfileParser) {\n    function parse(content) {\n        let parser = new parser_1.Parser();\n        return parser.parse(content);\n    }\n    DockerfileParser.parse = parse;\n})(DockerfileParser = exports.DockerfileParser || (exports.DockerfileParser = {}));\n"],"sourceRoot":""}